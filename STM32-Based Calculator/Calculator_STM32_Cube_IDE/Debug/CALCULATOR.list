
CALCULATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003244  08003244  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003244  08003244  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003244  08003244  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  080032b8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080032b8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a69  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171e  00000000  00000000  00026b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f7  00000000  00000000  00028a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001709f  00000000  00000000  00029037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a15e  00000000  00000000  000400d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082813  00000000  00000000  0004a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002484  00000000  00000000  000cca48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ceecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800309c 	.word	0x0800309c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	0800309c 	.word	0x0800309c

0800014c <Keypad_Get_Char>:
                         {'4','5','6','*'},
                         {'7','8','9','-'},
                         {'C','0','=','+'}};

char Keypad_Get_Char(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	val_key = 0;
 8000150:	4bc7      	ldr	r3, [pc, #796]	; (8000470 <Keypad_Get_Char+0x324>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000156:	2200      	movs	r2, #0
 8000158:	2180      	movs	r1, #128	; 0x80
 800015a:	48c6      	ldr	r0, [pc, #792]	; (8000474 <Keypad_Get_Char+0x328>)
 800015c:	f001 f99f 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	2140      	movs	r1, #64	; 0x40
 8000164:	48c3      	ldr	r0, [pc, #780]	; (8000474 <Keypad_Get_Char+0x328>)
 8000166:	f001 f99a 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2120      	movs	r1, #32
 800016e:	48c1      	ldr	r0, [pc, #772]	; (8000474 <Keypad_Get_Char+0x328>)
 8000170:	f001 f995 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2110      	movs	r1, #16
 8000178:	48be      	ldr	r0, [pc, #760]	; (8000474 <Keypad_Get_Char+0x328>)
 800017a:	f001 f990 	bl	800149e <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800017e:	2108      	movs	r1, #8
 8000180:	48bc      	ldr	r0, [pc, #752]	; (8000474 <Keypad_Get_Char+0x328>)
 8000182:	f001 f975 	bl	8001470 <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d110      	bne.n	80001ae <Keypad_Get_Char+0x62>
		HAL_Delay(4);
 800018c:	2004      	movs	r0, #4
 800018e:	f000 fee3 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 8000192:	bf00      	nop
 8000194:	2108      	movs	r1, #8
 8000196:	48b7      	ldr	r0, [pc, #732]	; (8000474 <Keypad_Get_Char+0x328>)
 8000198:	f001 f96a 	bl	8001470 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f8      	beq.n	8000194 <Keypad_Get_Char+0x48>
		HAL_Delay(4);
 80001a2:	2004      	movs	r0, #4
 80001a4:	f000 fed8 	bl	8000f58 <HAL_Delay>
		val_key = keys[0][0];
 80001a8:	2231      	movs	r2, #49	; 0x31
 80001aa:	4bb1      	ldr	r3, [pc, #708]	; (8000470 <Keypad_Get_Char+0x324>)
 80001ac:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80001ae:	2104      	movs	r1, #4
 80001b0:	48b0      	ldr	r0, [pc, #704]	; (8000474 <Keypad_Get_Char+0x328>)
 80001b2:	f001 f95d 	bl	8001470 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d110      	bne.n	80001de <Keypad_Get_Char+0x92>
		HAL_Delay(4);
 80001bc:	2004      	movs	r0, #4
 80001be:	f000 fecb 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2104      	movs	r1, #4
 80001c6:	48ab      	ldr	r0, [pc, #684]	; (8000474 <Keypad_Get_Char+0x328>)
 80001c8:	f001 f952 	bl	8001470 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <Keypad_Get_Char+0x78>
		HAL_Delay(4);
 80001d2:	2004      	movs	r0, #4
 80001d4:	f000 fec0 	bl	8000f58 <HAL_Delay>
		val_key = keys[0][1];
 80001d8:	2232      	movs	r2, #50	; 0x32
 80001da:	4ba5      	ldr	r3, [pc, #660]	; (8000470 <Keypad_Get_Char+0x324>)
 80001dc:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80001de:	2102      	movs	r1, #2
 80001e0:	48a4      	ldr	r0, [pc, #656]	; (8000474 <Keypad_Get_Char+0x328>)
 80001e2:	f001 f945 	bl	8001470 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d110      	bne.n	800020e <Keypad_Get_Char+0xc2>
		HAL_Delay(4);
 80001ec:	2004      	movs	r0, #4
 80001ee:	f000 feb3 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001f2:	bf00      	nop
 80001f4:	2102      	movs	r1, #2
 80001f6:	489f      	ldr	r0, [pc, #636]	; (8000474 <Keypad_Get_Char+0x328>)
 80001f8:	f001 f93a 	bl	8001470 <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f8      	beq.n	80001f4 <Keypad_Get_Char+0xa8>
		HAL_Delay(4);
 8000202:	2004      	movs	r0, #4
 8000204:	f000 fea8 	bl	8000f58 <HAL_Delay>
		val_key = keys[0][2];
 8000208:	2233      	movs	r2, #51	; 0x33
 800020a:	4b99      	ldr	r3, [pc, #612]	; (8000470 <Keypad_Get_Char+0x324>)
 800020c:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 800020e:	2101      	movs	r1, #1
 8000210:	4898      	ldr	r0, [pc, #608]	; (8000474 <Keypad_Get_Char+0x328>)
 8000212:	f001 f92d 	bl	8001470 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d110      	bne.n	800023e <Keypad_Get_Char+0xf2>
		HAL_Delay(4);
 800021c:	2004      	movs	r0, #4
 800021e:	f000 fe9b 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000222:	bf00      	nop
 8000224:	2101      	movs	r1, #1
 8000226:	4893      	ldr	r0, [pc, #588]	; (8000474 <Keypad_Get_Char+0x328>)
 8000228:	f001 f922 	bl	8001470 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f8      	beq.n	8000224 <Keypad_Get_Char+0xd8>
		HAL_Delay(4);
 8000232:	2004      	movs	r0, #4
 8000234:	f000 fe90 	bl	8000f58 <HAL_Delay>
		val_key = keys[0][3];
 8000238:	222f      	movs	r2, #47	; 0x2f
 800023a:	4b8d      	ldr	r3, [pc, #564]	; (8000470 <Keypad_Get_Char+0x324>)
 800023c:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2180      	movs	r1, #128	; 0x80
 8000242:	488c      	ldr	r0, [pc, #560]	; (8000474 <Keypad_Get_Char+0x328>)
 8000244:	f001 f92b 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4889      	ldr	r0, [pc, #548]	; (8000474 <Keypad_Get_Char+0x328>)
 800024e:	f001 f926 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2120      	movs	r1, #32
 8000256:	4887      	ldr	r0, [pc, #540]	; (8000474 <Keypad_Get_Char+0x328>)
 8000258:	f001 f921 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	2110      	movs	r1, #16
 8000260:	4884      	ldr	r0, [pc, #528]	; (8000474 <Keypad_Get_Char+0x328>)
 8000262:	f001 f91c 	bl	800149e <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000266:	2108      	movs	r1, #8
 8000268:	4882      	ldr	r0, [pc, #520]	; (8000474 <Keypad_Get_Char+0x328>)
 800026a:	f001 f901 	bl	8001470 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d110      	bne.n	8000296 <Keypad_Get_Char+0x14a>
		HAL_Delay(4);
 8000274:	2004      	movs	r0, #4
 8000276:	f000 fe6f 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800027a:	bf00      	nop
 800027c:	2108      	movs	r1, #8
 800027e:	487d      	ldr	r0, [pc, #500]	; (8000474 <Keypad_Get_Char+0x328>)
 8000280:	f001 f8f6 	bl	8001470 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f8      	beq.n	800027c <Keypad_Get_Char+0x130>
		HAL_Delay(4);
 800028a:	2004      	movs	r0, #4
 800028c:	f000 fe64 	bl	8000f58 <HAL_Delay>
		val_key = keys[1][0];
 8000290:	2234      	movs	r2, #52	; 0x34
 8000292:	4b77      	ldr	r3, [pc, #476]	; (8000470 <Keypad_Get_Char+0x324>)
 8000294:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000296:	2104      	movs	r1, #4
 8000298:	4876      	ldr	r0, [pc, #472]	; (8000474 <Keypad_Get_Char+0x328>)
 800029a:	f001 f8e9 	bl	8001470 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d110      	bne.n	80002c6 <Keypad_Get_Char+0x17a>
		HAL_Delay(4);
 80002a4:	2004      	movs	r0, #4
 80002a6:	f000 fe57 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80002aa:	bf00      	nop
 80002ac:	2104      	movs	r1, #4
 80002ae:	4871      	ldr	r0, [pc, #452]	; (8000474 <Keypad_Get_Char+0x328>)
 80002b0:	f001 f8de 	bl	8001470 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <Keypad_Get_Char+0x160>
		HAL_Delay(4);
 80002ba:	2004      	movs	r0, #4
 80002bc:	f000 fe4c 	bl	8000f58 <HAL_Delay>
		val_key = keys[1][1];
 80002c0:	2235      	movs	r2, #53	; 0x35
 80002c2:	4b6b      	ldr	r3, [pc, #428]	; (8000470 <Keypad_Get_Char+0x324>)
 80002c4:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80002c6:	2102      	movs	r1, #2
 80002c8:	486a      	ldr	r0, [pc, #424]	; (8000474 <Keypad_Get_Char+0x328>)
 80002ca:	f001 f8d1 	bl	8001470 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d110      	bne.n	80002f6 <Keypad_Get_Char+0x1aa>
		HAL_Delay(4);
 80002d4:	2004      	movs	r0, #4
 80002d6:	f000 fe3f 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80002da:	bf00      	nop
 80002dc:	2102      	movs	r1, #2
 80002de:	4865      	ldr	r0, [pc, #404]	; (8000474 <Keypad_Get_Char+0x328>)
 80002e0:	f001 f8c6 	bl	8001470 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f8      	beq.n	80002dc <Keypad_Get_Char+0x190>
		HAL_Delay(4);
 80002ea:	2004      	movs	r0, #4
 80002ec:	f000 fe34 	bl	8000f58 <HAL_Delay>
		val_key = keys[1][2];
 80002f0:	2236      	movs	r2, #54	; 0x36
 80002f2:	4b5f      	ldr	r3, [pc, #380]	; (8000470 <Keypad_Get_Char+0x324>)
 80002f4:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80002f6:	2101      	movs	r1, #1
 80002f8:	485e      	ldr	r0, [pc, #376]	; (8000474 <Keypad_Get_Char+0x328>)
 80002fa:	f001 f8b9 	bl	8001470 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d110      	bne.n	8000326 <Keypad_Get_Char+0x1da>
		HAL_Delay(4);
 8000304:	2004      	movs	r0, #4
 8000306:	f000 fe27 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800030a:	bf00      	nop
 800030c:	2101      	movs	r1, #1
 800030e:	4859      	ldr	r0, [pc, #356]	; (8000474 <Keypad_Get_Char+0x328>)
 8000310:	f001 f8ae 	bl	8001470 <HAL_GPIO_ReadPin>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <Keypad_Get_Char+0x1c0>
		HAL_Delay(4);
 800031a:	2004      	movs	r0, #4
 800031c:	f000 fe1c 	bl	8000f58 <HAL_Delay>
		val_key = keys[1][3];
 8000320:	222a      	movs	r2, #42	; 0x2a
 8000322:	4b53      	ldr	r3, [pc, #332]	; (8000470 <Keypad_Get_Char+0x324>)
 8000324:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	4852      	ldr	r0, [pc, #328]	; (8000474 <Keypad_Get_Char+0x328>)
 800032c:	f001 f8b7 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484f      	ldr	r0, [pc, #316]	; (8000474 <Keypad_Get_Char+0x328>)
 8000336:	f001 f8b2 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2120      	movs	r1, #32
 800033e:	484d      	ldr	r0, [pc, #308]	; (8000474 <Keypad_Get_Char+0x328>)
 8000340:	f001 f8ad 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	484a      	ldr	r0, [pc, #296]	; (8000474 <Keypad_Get_Char+0x328>)
 800034a:	f001 f8a8 	bl	800149e <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800034e:	2108      	movs	r1, #8
 8000350:	4848      	ldr	r0, [pc, #288]	; (8000474 <Keypad_Get_Char+0x328>)
 8000352:	f001 f88d 	bl	8001470 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d110      	bne.n	800037e <Keypad_Get_Char+0x232>
		HAL_Delay(4);
 800035c:	2004      	movs	r0, #4
 800035e:	f000 fdfb 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000362:	bf00      	nop
 8000364:	2108      	movs	r1, #8
 8000366:	4843      	ldr	r0, [pc, #268]	; (8000474 <Keypad_Get_Char+0x328>)
 8000368:	f001 f882 	bl	8001470 <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f8      	beq.n	8000364 <Keypad_Get_Char+0x218>
		HAL_Delay(4);
 8000372:	2004      	movs	r0, #4
 8000374:	f000 fdf0 	bl	8000f58 <HAL_Delay>
		val_key = keys[2][0];
 8000378:	2237      	movs	r2, #55	; 0x37
 800037a:	4b3d      	ldr	r3, [pc, #244]	; (8000470 <Keypad_Get_Char+0x324>)
 800037c:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800037e:	2104      	movs	r1, #4
 8000380:	483c      	ldr	r0, [pc, #240]	; (8000474 <Keypad_Get_Char+0x328>)
 8000382:	f001 f875 	bl	8001470 <HAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d110      	bne.n	80003ae <Keypad_Get_Char+0x262>
		HAL_Delay(4);
 800038c:	2004      	movs	r0, #4
 800038e:	f000 fde3 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000392:	bf00      	nop
 8000394:	2104      	movs	r1, #4
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <Keypad_Get_Char+0x328>)
 8000398:	f001 f86a 	bl	8001470 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f8      	beq.n	8000394 <Keypad_Get_Char+0x248>
		HAL_Delay(4);
 80003a2:	2004      	movs	r0, #4
 80003a4:	f000 fdd8 	bl	8000f58 <HAL_Delay>
		val_key = keys[2][1];
 80003a8:	2238      	movs	r2, #56	; 0x38
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <Keypad_Get_Char+0x324>)
 80003ac:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80003ae:	2102      	movs	r1, #2
 80003b0:	4830      	ldr	r0, [pc, #192]	; (8000474 <Keypad_Get_Char+0x328>)
 80003b2:	f001 f85d 	bl	8001470 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d110      	bne.n	80003de <Keypad_Get_Char+0x292>
		HAL_Delay(4);
 80003bc:	2004      	movs	r0, #4
 80003be:	f000 fdcb 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80003c2:	bf00      	nop
 80003c4:	2102      	movs	r1, #2
 80003c6:	482b      	ldr	r0, [pc, #172]	; (8000474 <Keypad_Get_Char+0x328>)
 80003c8:	f001 f852 	bl	8001470 <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f8      	beq.n	80003c4 <Keypad_Get_Char+0x278>
		HAL_Delay(4);
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 fdc0 	bl	8000f58 <HAL_Delay>
		val_key = keys[2][2];
 80003d8:	2239      	movs	r2, #57	; 0x39
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <Keypad_Get_Char+0x324>)
 80003dc:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 80003de:	2101      	movs	r1, #1
 80003e0:	4824      	ldr	r0, [pc, #144]	; (8000474 <Keypad_Get_Char+0x328>)
 80003e2:	f001 f845 	bl	8001470 <HAL_GPIO_ReadPin>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d110      	bne.n	800040e <Keypad_Get_Char+0x2c2>
		HAL_Delay(4);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f000 fdb3 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80003f2:	bf00      	nop
 80003f4:	2101      	movs	r1, #1
 80003f6:	481f      	ldr	r0, [pc, #124]	; (8000474 <Keypad_Get_Char+0x328>)
 80003f8:	f001 f83a 	bl	8001470 <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f8      	beq.n	80003f4 <Keypad_Get_Char+0x2a8>
		HAL_Delay(4);
 8000402:	2004      	movs	r0, #4
 8000404:	f000 fda8 	bl	8000f58 <HAL_Delay>
		val_key = keys[2][3];
 8000408:	222d      	movs	r2, #45	; 0x2d
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <Keypad_Get_Char+0x324>)
 800040c:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	4818      	ldr	r0, [pc, #96]	; (8000474 <Keypad_Get_Char+0x328>)
 8000414:	f001 f843 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <Keypad_Get_Char+0x328>)
 800041e:	f001 f83e 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	4813      	ldr	r0, [pc, #76]	; (8000474 <Keypad_Get_Char+0x328>)
 8000428:	f001 f839 	bl	800149e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2110      	movs	r1, #16
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <Keypad_Get_Char+0x328>)
 8000432:	f001 f834 	bl	800149e <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000436:	2108      	movs	r1, #8
 8000438:	480e      	ldr	r0, [pc, #56]	; (8000474 <Keypad_Get_Char+0x328>)
 800043a:	f001 f819 	bl	8001470 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d110      	bne.n	8000466 <Keypad_Get_Char+0x31a>
		HAL_Delay(4);
 8000444:	2004      	movs	r0, #4
 8000446:	f000 fd87 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800044a:	bf00      	nop
 800044c:	2108      	movs	r1, #8
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <Keypad_Get_Char+0x328>)
 8000450:	f001 f80e 	bl	8001470 <HAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f8      	beq.n	800044c <Keypad_Get_Char+0x300>
		HAL_Delay(4);
 800045a:	2004      	movs	r0, #4
 800045c:	f000 fd7c 	bl	8000f58 <HAL_Delay>
		val_key = keys[3][0];
 8000460:	2243      	movs	r2, #67	; 0x43
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <Keypad_Get_Char+0x324>)
 8000464:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000466:	2104      	movs	r1, #4
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <Keypad_Get_Char+0x328>)
 800046a:	f001 f801 	bl	8001470 <HAL_GPIO_ReadPin>
 800046e:	e003      	b.n	8000478 <Keypad_Get_Char+0x32c>
 8000470:	20000088 	.word	0x20000088
 8000474:	40010800 	.word	0x40010800
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d110      	bne.n	80004a0 <Keypad_Get_Char+0x354>
		HAL_Delay(4);
 800047e:	2004      	movs	r0, #4
 8000480:	f000 fd6a 	bl	8000f58 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000484:	bf00      	nop
 8000486:	2104      	movs	r1, #4
 8000488:	481f      	ldr	r0, [pc, #124]	; (8000508 <Keypad_Get_Char+0x3bc>)
 800048a:	f000 fff1 	bl	8001470 <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f8      	beq.n	8000486 <Keypad_Get_Char+0x33a>
		HAL_Delay(4);
 8000494:	2004      	movs	r0, #4
 8000496:	f000 fd5f 	bl	8000f58 <HAL_Delay>
		val_key = keys[3][1];
 800049a:	2230      	movs	r2, #48	; 0x30
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <Keypad_Get_Char+0x3c0>)
 800049e:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80004a0:	2102      	movs	r1, #2
 80004a2:	4819      	ldr	r0, [pc, #100]	; (8000508 <Keypad_Get_Char+0x3bc>)
 80004a4:	f000 ffe4 	bl	8001470 <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d110      	bne.n	80004d0 <Keypad_Get_Char+0x384>
		HAL_Delay(4);
 80004ae:	2004      	movs	r0, #4
 80004b0:	f000 fd52 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80004b4:	bf00      	nop
 80004b6:	2102      	movs	r1, #2
 80004b8:	4813      	ldr	r0, [pc, #76]	; (8000508 <Keypad_Get_Char+0x3bc>)
 80004ba:	f000 ffd9 	bl	8001470 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f8      	beq.n	80004b6 <Keypad_Get_Char+0x36a>
		HAL_Delay(4);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f000 fd47 	bl	8000f58 <HAL_Delay>
		val_key = keys[3][2];
 80004ca:	223d      	movs	r2, #61	; 0x3d
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <Keypad_Get_Char+0x3c0>)
 80004ce:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80004d0:	2101      	movs	r1, #1
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <Keypad_Get_Char+0x3bc>)
 80004d4:	f000 ffcc 	bl	8001470 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d110      	bne.n	8000500 <Keypad_Get_Char+0x3b4>
		HAL_Delay(4);
 80004de:	2004      	movs	r0, #4
 80004e0:	f000 fd3a 	bl	8000f58 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80004e4:	bf00      	nop
 80004e6:	2101      	movs	r1, #1
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <Keypad_Get_Char+0x3bc>)
 80004ea:	f000 ffc1 	bl	8001470 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f8      	beq.n	80004e6 <Keypad_Get_Char+0x39a>
		HAL_Delay(4);
 80004f4:	2004      	movs	r0, #4
 80004f6:	f000 fd2f 	bl	8000f58 <HAL_Delay>
		val_key = keys[3][3];
 80004fa:	222b      	movs	r2, #43	; 0x2b
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <Keypad_Get_Char+0x3c0>)
 80004fe:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <Keypad_Get_Char+0x3c0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010800 	.word	0x40010800
 800050c:	20000088 	.word	0x20000088

08000510 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800051a:	4a38      	ldr	r2, [pc, #224]	; (80005fc <HD44780_Init+0xec>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <HD44780_Init+0xf0>)
 8000522:	2208      	movs	r2, #8
 8000524:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <HD44780_Init+0xf4>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xec>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d907      	bls.n	8000544 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000534:	4b33      	ldr	r3, [pc, #204]	; (8000604 <HD44780_Init+0xf4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <HD44780_Init+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e006      	b.n	8000552 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <HD44780_Init+0xf4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <HD44780_Init+0xf4>)
 8000550:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000552:	f000 f985 	bl	8000860 <DelayInit>
  HAL_Delay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fcfe 	bl	8000f58 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <HD44780_Init+0xf0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f943 	bl	80007ec <ExpanderWrite>
  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fcf5 	bl	8000f58 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800056e:	2030      	movs	r0, #48	; 0x30
 8000570:	f000 f92b 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000574:	f241 1094 	movw	r0, #4500	; 0x1194
 8000578:	f000 f99a 	bl	80008b0 <DelayUS>

  Write4Bits(0x03 << 4);
 800057c:	2030      	movs	r0, #48	; 0x30
 800057e:	f000 f924 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000582:	f241 1094 	movw	r0, #4500	; 0x1194
 8000586:	f000 f993 	bl	80008b0 <DelayUS>

  Write4Bits(0x03 << 4);
 800058a:	2030      	movs	r0, #48	; 0x30
 800058c:	f000 f91d 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000590:	f241 1094 	movw	r0, #4500	; 0x1194
 8000594:	f000 f98c 	bl	80008b0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000598:	2020      	movs	r0, #32
 800059a:	f000 f916 	bl	80007ca <Write4Bits>
  DelayUS(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 f986 	bl	80008b0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HD44780_Init+0xf4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f8ce 	bl	8000750 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HD44780_Init+0xf8>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005ba:	f000 f875 	bl	80006a8 <HD44780_Display>
  HD44780_Clear();
 80005be:	f000 f82b 	bl	8000618 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HD44780_Init+0xfc>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <HD44780_Init+0xfc>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f8bc 	bl	8000750 <SendCommand>
  DelayUS(4500);
 80005d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005dc:	f000 f968 	bl	80008b0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <HD44780_Init+0x100>)
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f876 	bl	80006d4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <HD44780_Init+0x104>)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f872 	bl	80006d4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005f0:	f000 f81d 	bl	800062e <HD44780_Home>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	2000008d 	.word	0x2000008d
 8000604:	20000089 	.word	0x20000089
 8000608:	2000008a 	.word	0x2000008a
 800060c:	2000008b 	.word	0x2000008b
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008

08000618 <HD44780_Clear>:

void HD44780_Clear()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f897 	bl	8000750 <SendCommand>
  DelayUS(2000);
 8000622:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000626:	f000 f943 	bl	80008b0 <DelayUS>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <HD44780_Home>:

void HD44780_Home()
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f88c 	bl	8000750 <SendCommand>
  DelayUS(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f000 f938 	bl	80008b0 <DelayUS>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HD44780_SetCursor+0x5c>)
 8000656:	f107 0408 	add.w	r4, r7, #8
 800065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HD44780_SetCursor+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	429a      	cmp	r2, r3
 8000668:	d303      	bcc.n	8000672 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HD44780_SetCursor+0x60>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3318      	adds	r3, #24
 8000678:	443b      	add	r3, r7
 800067a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4413      	add	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	b25b      	sxtb	r3, r3
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f85d 	bl	8000750 <SendCommand>
}
 8000696:	bf00      	nop
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	080030b4 	.word	0x080030b4
 80006a4:	2000008c 	.word	0x2000008c

080006a8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HD44780_Display+0x28>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HD44780_Display+0x28>)
 80006b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HD44780_Display+0x28>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f843 	bl	8000750 <SendCommand>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000008a 	.word	0x2000008a

080006d4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82a 	bl	8000750 <SendCommand>
  for (int i=0; i<8; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e009      	b.n	8000716 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f82e 	bl	800076c <SendChar>
  for (int i=0; i<8; i++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b07      	cmp	r3, #7
 800071a:	ddf2      	ble.n	8000702 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072e:	e006      	b.n	800073e <HD44780_PrintStr+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f817 	bl	800076c <SendChar>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <HD44780_PrintStr+0xa>
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f812 	bl	8000788 <Send>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SendChar>:

static void SendChar(uint8_t ch)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f804 	bl	8000788 <Send>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f80b 	bl	80007ca <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b4:	7bba      	ldrb	r2, [r7, #14]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f804 	bl	80007ca <Write4Bits>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f808 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f820 	bl	8000824 <PulseEnable>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	217e      	movs	r1, #126	; 0x7e
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <ExpanderWrite+0x34>)
 8000810:	f000 ffa2 	bl	8001758 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000008d 	.word	0x2000008d
 8000820:	20000090 	.word	0x20000090

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f837 	bl	80008b0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82d 	bl	80008b0 <DelayUS>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <DelayInit+0x48>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <DelayInit+0x48>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <DelayInit+0x48>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <DelayInit+0x48>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <DelayInit+0x4c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <DelayInit+0x4c>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <DelayInit+0x4c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <DelayInit+0x4c>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <DelayInit+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000edf0 	.word	0xe000edf0
 80008ac:	e0001000 	.word	0xe0001000

080008b0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <DelayUS+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <DelayUS+0x44>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	0c9a      	lsrs	r2, r3, #18
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <DelayUS+0x48>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <DelayUS+0x48>)
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f6      	bhi.n	80008d2 <DelayUS+0x22>
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000010 	.word	0x20000010
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	e0001000 	.word	0xe0001000

080008fc <main>:
  * @brief  The application entry point.
  * @retval int
  */
#define LCD_ROWS 2
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fac7 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f8ff 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 f967 	bl	8000bdc <MX_GPIO_Init>
  MX_I2C1_Init();
 800090e:	f000 f937 	bl	8000b80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(LCD_ROWS);
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fdfc 	bl	8000510 <HD44780_Init>
  // Display "Calculator" at the second row, third column
  HD44780_PrintStr("___Calculator___");
 8000918:	4873      	ldr	r0, [pc, #460]	; (8000ae8 <main+0x1ec>)
 800091a:	f7ff ff04 	bl	8000726 <HD44780_PrintStr>
  HD44780_SetCursor(2, 5);
 800091e:	2105      	movs	r1, #5
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fe8f 	bl	8000644 <HD44780_SetCursor>
  // Wait for 1500 milliseconds
  HAL_Delay(1500);
 8000926:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800092a:	f000 fb15 	bl	8000f58 <HAL_Delay>
  // Clear the LCD
  HD44780_Clear();
 800092e:	f7ff fe73 	bl	8000618 <HD44780_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    // Get a character from the keypad
    key = Keypad_Get_Char();
 8000932:	f7ff fc0b 	bl	800014c <Keypad_Get_Char>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <main+0x1f0>)
 800093c:	701a      	strb	r2, [r3, #0]
    if (key != '\0') {
 800093e:	4b6b      	ldr	r3, [pc, #428]	; (8000aec <main+0x1f0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f5      	beq.n	8000932 <main+0x36>
      if (key >= '0' && key <= '9') {
 8000946:	4b69      	ldr	r3, [pc, #420]	; (8000aec <main+0x1f0>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b2f      	cmp	r3, #47	; 0x2f
 800094c:	d911      	bls.n	8000972 <main+0x76>
 800094e:	4b67      	ldr	r3, [pc, #412]	; (8000aec <main+0x1f0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b39      	cmp	r3, #57	; 0x39
 8000954:	d80d      	bhi.n	8000972 <main+0x76>
        // Numeric key, append to the operand buffer
        if (operator == '\0') {
 8000956:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <main+0x1f4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d104      	bne.n	8000968 <main+0x6c>
          strcat(operand1, &key);
 800095e:	4963      	ldr	r1, [pc, #396]	; (8000aec <main+0x1f0>)
 8000960:	4864      	ldr	r0, [pc, #400]	; (8000af4 <main+0x1f8>)
 8000962:	f001 ff01 	bl	8002768 <strcat>
        if (operator == '\0') {
 8000966:	e0a4      	b.n	8000ab2 <main+0x1b6>
        } else {
          strcat(operand2, &key);
 8000968:	4960      	ldr	r1, [pc, #384]	; (8000aec <main+0x1f0>)
 800096a:	4863      	ldr	r0, [pc, #396]	; (8000af8 <main+0x1fc>)
 800096c:	f001 fefc 	bl	8002768 <strcat>
        if (operator == '\0') {
 8000970:	e09f      	b.n	8000ab2 <main+0x1b6>
        }
      } else if (key == '+' || key == '-' || key == '*' || key == '/') {
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <main+0x1f0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b2b      	cmp	r3, #43	; 0x2b
 8000978:	d00b      	beq.n	8000992 <main+0x96>
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <main+0x1f0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b2d      	cmp	r3, #45	; 0x2d
 8000980:	d007      	beq.n	8000992 <main+0x96>
 8000982:	4b5a      	ldr	r3, [pc, #360]	; (8000aec <main+0x1f0>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b2a      	cmp	r3, #42	; 0x2a
 8000988:	d003      	beq.n	8000992 <main+0x96>
 800098a:	4b58      	ldr	r3, [pc, #352]	; (8000aec <main+0x1f0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b2f      	cmp	r3, #47	; 0x2f
 8000990:	d104      	bne.n	800099c <main+0xa0>
        // Operator key
        operator = key;
 8000992:	4b56      	ldr	r3, [pc, #344]	; (8000aec <main+0x1f0>)
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <main+0x1f4>)
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e08a      	b.n	8000ab2 <main+0x1b6>
      } else if (key == '=') {
 800099c:	4b53      	ldr	r3, [pc, #332]	; (8000aec <main+0x1f0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b3d      	cmp	r3, #61	; 0x3d
 80009a2:	d174      	bne.n	8000a8e <main+0x192>
        // Equals key, perform calculation
        int num1 = atoi(operand1);
 80009a4:	4853      	ldr	r0, [pc, #332]	; (8000af4 <main+0x1f8>)
 80009a6:	f001 fe2b 	bl	8002600 <atoi>
 80009aa:	60b8      	str	r0, [r7, #8]
        int num2 = atoi(operand2);
 80009ac:	4852      	ldr	r0, [pc, #328]	; (8000af8 <main+0x1fc>)
 80009ae:	f001 fe27 	bl	8002600 <atoi>
 80009b2:	6078      	str	r0, [r7, #4]
        int resultVal;
        switch (operator) {
 80009b4:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <main+0x1f4>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b2a      	subs	r3, #42	; 0x2a
 80009ba:	2b05      	cmp	r3, #5
 80009bc:	d848      	bhi.n	8000a50 <main+0x154>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <main+0xc8>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009f1 	.word	0x080009f1
 80009c8:	080009dd 	.word	0x080009dd
 80009cc:	08000a51 	.word	0x08000a51
 80009d0:	080009e7 	.word	0x080009e7
 80009d4:	08000a51 	.word	0x08000a51
 80009d8:	080009fd 	.word	0x080009fd
          case '+':
            resultVal = num1 + num2;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
            break;
 80009e4:	e034      	b.n	8000a50 <main+0x154>
          case '-':
            resultVal = num1 - num2;
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	60fb      	str	r3, [r7, #12]
            break;
 80009ee:	e02f      	b.n	8000a50 <main+0x154>
          case '*':
            resultVal = num1 * num2;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
 80009f8:	60fb      	str	r3, [r7, #12]
            break;
 80009fa:	e029      	b.n	8000a50 <main+0x154>
          case '/':
            if (num2 != 0) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d005      	beq.n	8000a0e <main+0x112>
              resultVal = num1 / num2;
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a0a:	60fb      	str	r3, [r7, #12]
              strcpy(result, "");
              operator = '\0';
              HD44780_Clear();
              continue;
            }
            break;
 8000a0c:	e020      	b.n	8000a50 <main+0x154>
              strcpy(result, "Error");
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <main+0x200>)
 8000a10:	4a3b      	ldr	r2, [pc, #236]	; (8000b00 <main+0x204>)
 8000a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a16:	6018      	str	r0, [r3, #0]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	8019      	strh	r1, [r3, #0]
              HD44780_SetCursor(1, 1);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fe10 	bl	8000644 <HD44780_SetCursor>
              HD44780_PrintStr(result);
 8000a24:	4835      	ldr	r0, [pc, #212]	; (8000afc <main+0x200>)
 8000a26:	f7ff fe7e 	bl	8000726 <HD44780_PrintStr>
              HAL_Delay(2000);
 8000a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a2e:	f000 fa93 	bl	8000f58 <HAL_Delay>
              strcpy(operand1, "");
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <main+0x1f8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
              strcpy(operand2, "");
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <main+0x1fc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
              strcpy(result, "");
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <main+0x200>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
              operator = '\0';
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <main+0x1f4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
              HD44780_Clear();
 8000a4a:	f7ff fde5 	bl	8000618 <HD44780_Clear>
              continue;
 8000a4e:	e04a      	b.n	8000ae6 <main+0x1ea>
        }
        // Convert the result to a string and display
        sprintf(result, "%d", resultVal);
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	492c      	ldr	r1, [pc, #176]	; (8000b04 <main+0x208>)
 8000a54:	4829      	ldr	r0, [pc, #164]	; (8000afc <main+0x200>)
 8000a56:	f001 fe5f 	bl	8002718 <siprintf>
        HD44780_SetCursor(1, 1);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fdf1 	bl	8000644 <HD44780_SetCursor>
        HD44780_PrintStr(result);
 8000a62:	4826      	ldr	r0, [pc, #152]	; (8000afc <main+0x200>)
 8000a64:	f7ff fe5f 	bl	8000726 <HD44780_PrintStr>
        HAL_Delay(2000);
 8000a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6c:	f000 fa74 	bl	8000f58 <HAL_Delay>
        // Clear buffers
        strcpy(operand1, "");
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <main+0x1f8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
        strcpy(operand2, "");
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <main+0x1fc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
        strcpy(result, "");
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <main+0x200>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
        operator = '\0';
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <main+0x1f4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
        HD44780_Clear();
 8000a88:	f7ff fdc6 	bl	8000618 <HD44780_Clear>
 8000a8c:	e011      	b.n	8000ab2 <main+0x1b6>
      } else if (key == 'C') {
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <main+0x1f0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b43      	cmp	r3, #67	; 0x43
 8000a94:	d10d      	bne.n	8000ab2 <main+0x1b6>
        // Clear key, clear all buffers and the display
        strcpy(operand1, "");
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <main+0x1f8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
        strcpy(operand2, "");
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <main+0x1fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
        strcpy(result, "");
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <main+0x200>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
        operator = '\0';
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <main+0x1f4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
        HD44780_Clear();
 8000aae:	f7ff fdb3 	bl	8000618 <HD44780_Clear>
      }
      // Display the current state on the LCD
      HD44780_SetCursor(1, 1);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fdc5 	bl	8000644 <HD44780_SetCursor>
      HD44780_PrintStr(operand1);
 8000aba:	480e      	ldr	r0, [pc, #56]	; (8000af4 <main+0x1f8>)
 8000abc:	f7ff fe33 	bl	8000726 <HD44780_PrintStr>

      if (operator != '\0') {
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <main+0x1f4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f43f af34 	beq.w	8000932 <main+0x36>
        HD44780_SetCursor(1, 2);
 8000aca:	2102      	movs	r1, #2
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fdb9 	bl	8000644 <HD44780_SetCursor>
        HD44780_PrintStr(&operator);
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <main+0x1f4>)
 8000ad4:	f7ff fe27 	bl	8000726 <HD44780_PrintStr>
        HD44780_SetCursor(1, 3);
 8000ad8:	2103      	movs	r1, #3
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fdb2 	bl	8000644 <HD44780_SetCursor>
        HD44780_PrintStr(operand2);
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <main+0x1fc>)
 8000ae2:	f7ff fe20 	bl	8000726 <HD44780_PrintStr>
    key = Keypad_Get_Char();
 8000ae6:	e724      	b.n	8000932 <main+0x36>
 8000ae8:	080030c4 	.word	0x080030c4
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	20000118 	.word	0x20000118
 8000af4:	200000e8 	.word	0x200000e8
 8000af8:	200000f8 	.word	0x200000f8
 8000afc:	20000108 	.word	0x20000108
 8000b00:	080030d8 	.word	0x080030d8
 8000b04:	080030e0 	.word	0x080030e0

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2228      	movs	r2, #40	; 0x28
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fe1e 	bl	8002758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b32:	2310      	movs	r3, #16
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f962 	bl	8001e08 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f891 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fbd0 	bl	800230c <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b72:	f000 f87d 	bl	8000c70 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	; 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <MX_I2C1_Init+0x54>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x58>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bbe:	f000 fc87 	bl	80014d0 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f000 f852 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000090 	.word	0x20000090
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	000186a0 	.word	0x000186a0

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_GPIO_Init+0x8c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	21f0      	movs	r1, #240	; 0xf0
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_GPIO_Init+0x90>)
 8000c26:	f000 fc3a 	bl	800149e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0x90>)
 8000c3e:	f000 fa93 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000c42:	23f0      	movs	r3, #240	; 0xf0
 8000c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	4619      	mov	r1, r3
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_GPIO_Init+0x90>)
 8000c5a:	f000 fa85 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010800 	.word	0x40010800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_I2C_MspInit+0x90>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d132      	bne.n	8000d66 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <HAL_I2C_MspInit+0x98>)
 8000d2e:	f000 fa1b 	bl	8001168 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_I2C_MspInit+0x9c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_I2C_MspInit+0x9c>)
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_I2C_MspInit+0x94>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010000 	.word	0x40010000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f8ab 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f001 fcc2 	bl	8002788 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20005000 	.word	0x20005000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	2000011c 	.word	0x2000011c
 8000e38:	20000270 	.word	0x20000270

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fff8 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4e:	490c      	ldr	r1, [pc, #48]	; (8000e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e64:	4c09      	ldr	r4, [pc, #36]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f001 fc8f 	bl	8002794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fd41 	bl	80008fc <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e84:	0800324c 	.word	0x0800324c
  ldr r2, =_sbss
 8000e88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e8c:	2000026c 	.word	0x2000026c

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f92b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fee4 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f935 	bl	800114e <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f90b 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	20000014 	.word	0x20000014

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000018 	.word	0x20000018
 8000f40:	20000120 	.word	0x20000120

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000120 	.word	0x20000120

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000018 	.word	0x20000018

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff90 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff49 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b08b      	sub	sp, #44	; 0x2c
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e169      	b.n	8001450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800117c:	2201      	movs	r2, #1
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8158 	bne.w	800144a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a9a      	ldr	r2, [pc, #616]	; (8001408 <HAL_GPIO_Init+0x2a0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d05e      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011a4:	4a98      	ldr	r2, [pc, #608]	; (8001408 <HAL_GPIO_Init+0x2a0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d875      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011aa:	4a98      	ldr	r2, [pc, #608]	; (800140c <HAL_GPIO_Init+0x2a4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d058      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011b0:	4a96      	ldr	r2, [pc, #600]	; (800140c <HAL_GPIO_Init+0x2a4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d86f      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011b6:	4a96      	ldr	r2, [pc, #600]	; (8001410 <HAL_GPIO_Init+0x2a8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d052      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011bc:	4a94      	ldr	r2, [pc, #592]	; (8001410 <HAL_GPIO_Init+0x2a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d869      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011c2:	4a94      	ldr	r2, [pc, #592]	; (8001414 <HAL_GPIO_Init+0x2ac>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d04c      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <HAL_GPIO_Init+0x2ac>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d863      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011ce:	4a92      	ldr	r2, [pc, #584]	; (8001418 <HAL_GPIO_Init+0x2b0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d046      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011d4:	4a90      	ldr	r2, [pc, #576]	; (8001418 <HAL_GPIO_Init+0x2b0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d85d      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d82a      	bhi.n	8001234 <HAL_GPIO_Init+0xcc>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d859      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <HAL_GPIO_Init+0x80>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001263 	.word	0x08001263
 80011ec:	0800123d 	.word	0x0800123d
 80011f0:	0800124f 	.word	0x0800124f
 80011f4:	08001291 	.word	0x08001291
 80011f8:	08001297 	.word	0x08001297
 80011fc:	08001297 	.word	0x08001297
 8001200:	08001297 	.word	0x08001297
 8001204:	08001297 	.word	0x08001297
 8001208:	08001297 	.word	0x08001297
 800120c:	08001297 	.word	0x08001297
 8001210:	08001297 	.word	0x08001297
 8001214:	08001297 	.word	0x08001297
 8001218:	08001297 	.word	0x08001297
 800121c:	08001297 	.word	0x08001297
 8001220:	08001297 	.word	0x08001297
 8001224:	08001297 	.word	0x08001297
 8001228:	08001297 	.word	0x08001297
 800122c:	08001245 	.word	0x08001245
 8001230:	08001259 	.word	0x08001259
 8001234:	4a79      	ldr	r2, [pc, #484]	; (800141c <HAL_GPIO_Init+0x2b4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123a:	e02c      	b.n	8001296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e029      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	3304      	adds	r3, #4
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e024      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	3308      	adds	r3, #8
 8001254:	623b      	str	r3, [r7, #32]
          break;
 8001256:	e01f      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	330c      	adds	r3, #12
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e01a      	b.n	8001298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126a:	2304      	movs	r3, #4
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e013      	b.n	8001298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001278:	2308      	movs	r3, #8
 800127a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	611a      	str	r2, [r3, #16]
          break;
 8001282:	e009      	b.n	8001298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001284:	2308      	movs	r3, #8
 8001286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	615a      	str	r2, [r3, #20]
          break;
 800128e:	e003      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x130>
          break;
 8001296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d801      	bhi.n	80012a2 <HAL_GPIO_Init+0x13a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_Init+0x13e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2bff      	cmp	r3, #255	; 0xff
 80012ac:	d802      	bhi.n	80012b4 <HAL_GPIO_Init+0x14c>
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x152>
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	3b08      	subs	r3, #8
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	210f      	movs	r1, #15
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	6a39      	ldr	r1, [r7, #32]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80b1 	beq.w	800144a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e8:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x2b8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x2b8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x2b8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001300:	4a48      	ldr	r2, [pc, #288]	; (8001424 <HAL_GPIO_Init+0x2bc>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a40      	ldr	r2, [pc, #256]	; (8001428 <HAL_GPIO_Init+0x2c0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1ec>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3f      	ldr	r2, [pc, #252]	; (800142c <HAL_GPIO_Init+0x2c4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1e8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3e      	ldr	r2, [pc, #248]	; (8001430 <HAL_GPIO_Init+0x2c8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_GPIO_Init+0x2cc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e0>
 8001344:	2303      	movs	r3, #3
 8001346:	e006      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001348:	2304      	movs	r3, #4
 800134a:	e004      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 800134c:	2302      	movs	r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001354:	2300      	movs	r3, #0
 8001356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001366:	492f      	ldr	r1, [pc, #188]	; (8001424 <HAL_GPIO_Init+0x2bc>)
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	492c      	ldr	r1, [pc, #176]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	4928      	ldr	r1, [pc, #160]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 8001398:	4013      	ands	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	4922      	ldr	r1, [pc, #136]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	491e      	ldr	r1, [pc, #120]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4918      	ldr	r1, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4914      	ldr	r1, [pc, #80]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d021      	beq.n	800143c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	490e      	ldr	r1, [pc, #56]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e021      	b.n	800144a <HAL_GPIO_Init+0x2e2>
 8001406:	bf00      	nop
 8001408:	10320000 	.word	0x10320000
 800140c:	10310000 	.word	0x10310000
 8001410:	10220000 	.word	0x10220000
 8001414:	10210000 	.word	0x10210000
 8001418:	10120000 	.word	0x10120000
 800141c:	10110000 	.word	0x10110000
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40011000 	.word	0x40011000
 8001434:	40011400 	.word	0x40011400
 8001438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_GPIO_Init+0x304>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	4909      	ldr	r1, [pc, #36]	; (800146c <HAL_GPIO_Init+0x304>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	3301      	adds	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	f47f ae8e 	bne.w	800117c <HAL_GPIO_Init+0x14>
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	372c      	adds	r7, #44	; 0x2c
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ba:	e003      	b.n	80014c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	041a      	lsls	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e12b      	b.n	800173a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fbf2 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001534:	f001 f832 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8001538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a81      	ldr	r2, [pc, #516]	; (8001744 <HAL_I2C_Init+0x274>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d807      	bhi.n	8001554 <HAL_I2C_Init+0x84>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a80      	ldr	r2, [pc, #512]	; (8001748 <HAL_I2C_Init+0x278>)
 8001548:	4293      	cmp	r3, r2
 800154a:	bf94      	ite	ls
 800154c:	2301      	movls	r3, #1
 800154e:	2300      	movhi	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e006      	b.n	8001562 <HAL_I2C_Init+0x92>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a7d      	ldr	r2, [pc, #500]	; (800174c <HAL_I2C_Init+0x27c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	bf94      	ite	ls
 800155c:	2301      	movls	r3, #1
 800155e:	2300      	movhi	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0e7      	b.n	800173a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a78      	ldr	r2, [pc, #480]	; (8001750 <HAL_I2C_Init+0x280>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_I2C_Init+0x274>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d802      	bhi.n	80015a4 <HAL_I2C_Init+0xd4>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3301      	adds	r3, #1
 80015a2:	e009      	b.n	80015b8 <HAL_I2C_Init+0xe8>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_I2C_Init+0x284>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	430b      	orrs	r3, r1
 80015be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	495c      	ldr	r1, [pc, #368]	; (8001744 <HAL_I2C_Init+0x274>)
 80015d4:	428b      	cmp	r3, r1
 80015d6:	d819      	bhi.n	800160c <HAL_I2C_Init+0x13c>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e59      	subs	r1, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015ec:	400b      	ands	r3, r1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00a      	beq.n	8001608 <HAL_I2C_Init+0x138>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e59      	subs	r1, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001606:	e051      	b.n	80016ac <HAL_I2C_Init+0x1dc>
 8001608:	2304      	movs	r3, #4
 800160a:	e04f      	b.n	80016ac <HAL_I2C_Init+0x1dc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d111      	bne.n	8001638 <HAL_I2C_Init+0x168>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1e58      	subs	r0, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e012      	b.n	800165e <HAL_I2C_Init+0x18e>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1e58      	subs	r0, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	0099      	lsls	r1, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	fbb0 f3f3 	udiv	r3, r0, r3
 800164e:	3301      	adds	r3, #1
 8001650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_Init+0x196>
 8001662:	2301      	movs	r3, #1
 8001664:	e022      	b.n	80016ac <HAL_I2C_Init+0x1dc>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <HAL_I2C_Init+0x1bc>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1e58      	subs	r0, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	440b      	add	r3, r1
 800167c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001680:	3301      	adds	r3, #1
 8001682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168a:	e00f      	b.n	80016ac <HAL_I2C_Init+0x1dc>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	0099      	lsls	r1, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	6809      	ldr	r1, [r1, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6911      	ldr	r1, [r2, #16]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68d2      	ldr	r2, [r2, #12]
 80016e6:	4311      	orrs	r1, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2220      	movs	r2, #32
 8001726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	000186a0 	.word	0x000186a0
 8001748:	001e847f 	.word	0x001e847f
 800174c:	003d08ff 	.word	0x003d08ff
 8001750:	431bde83 	.word	0x431bde83
 8001754:	10624dd3 	.word	0x10624dd3

08001758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	461a      	mov	r2, r3
 8001764:	460b      	mov	r3, r1
 8001766:	817b      	strh	r3, [r7, #10]
 8001768:	4613      	mov	r3, r2
 800176a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fbea 	bl	8000f44 <HAL_GetTick>
 8001770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b20      	cmp	r3, #32
 800177c:	f040 80e0 	bne.w	8001940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2319      	movs	r3, #25
 8001786:	2201      	movs	r2, #1
 8001788:	4970      	ldr	r1, [pc, #448]	; (800194c <HAL_I2C_Master_Transmit+0x1f4>)
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f964 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
 8001798:	e0d3      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_I2C_Master_Transmit+0x50>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0cc      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d007      	beq.n	80017ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2221      	movs	r2, #33	; 0x21
 80017e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2210      	movs	r2, #16
 80017ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	893a      	ldrh	r2, [r7, #8]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4a50      	ldr	r2, [pc, #320]	; (8001950 <HAL_I2C_Master_Transmit+0x1f8>)
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001810:	8979      	ldrh	r1, [r7, #10]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	6a3a      	ldr	r2, [r7, #32]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f89c 	bl	8001954 <I2C_MasterRequestWrite>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e08d      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800183c:	e066      	b.n	800190c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fa22 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2b04      	cmp	r3, #4
 8001854:	d107      	bne.n	8001866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06b      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d11b      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0x188>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fa19 	bl	8001d1c <I2C_WaitOnBTFFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00d      	beq.n	800190c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d107      	bne.n	8001908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e01a      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d194      	bne.n	800183e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	00100002 	.word	0x00100002
 8001950:	ffff0000 	.word	0xffff0000

08001954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d006      	beq.n	800197e <I2C_MasterRequestWrite+0x2a>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d003      	beq.n	800197e <I2C_MasterRequestWrite+0x2a>
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800197c:	d108      	bne.n	8001990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e00b      	b.n	80019a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	2b12      	cmp	r3, #18
 8001996:	d107      	bne.n	80019a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f84f 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ce:	d103      	bne.n	80019d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e035      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e4:	d108      	bne.n	80019f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	e01b      	b.n	8001a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019f8:	897b      	ldrh	r3, [r7, #10]
 80019fa:	11db      	asrs	r3, r3, #7
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0306 	and.w	r3, r3, #6
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f063 030f 	orn	r3, r3, #15
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <I2C_MasterRequestWrite+0xfc>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f898 	bl	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e010      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a26:	897b      	ldrh	r3, [r7, #10]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <I2C_MasterRequestWrite+0x100>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f888 	bl	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	00010008 	.word	0x00010008
 8001a54:	00010002 	.word	0x00010002

08001a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a68:	e048      	b.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d044      	beq.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7ff fa67 	bl	8000f44 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d139      	bne.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10d      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	e00c      	b.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d116      	bne.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e023      	b.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10d      	bne.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	e00c      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d093      	beq.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5a:	e071      	b.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d123      	bne.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e067      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bba:	d041      	beq.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7ff f9c2 	bl	8000f44 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d302      	bcc.n	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d136      	bne.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10c      	bne.n	8001bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	e00b      	b.n	8001c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	4013      	ands	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e021      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10c      	bne.n	8001c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e00b      	b.n	8001c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f af6d 	bne.w	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	e034      	b.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f886 	bl	8001dac <I2C_IsAcknowledgeFailed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e034      	b.n	8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d028      	beq.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff f947 	bl	8000f44 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11d      	bne.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d016      	beq.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e007      	b.n	8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b80      	cmp	r3, #128	; 0x80
 8001d10:	d1c3      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d28:	e034      	b.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f83e 	bl	8001dac <I2C_IsAcknowledgeFailed>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e034      	b.n	8001da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d028      	beq.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff f8ff 	bl	8000f44 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11d      	bne.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d016      	beq.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d1c3      	bne.n	8001d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d11b      	bne.n	8001dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 0204 	orr.w	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e272      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d112      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d06c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x12c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d168      	bne.n	8001f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e24c      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76>
 8001e70:	4b80      	ldr	r3, [pc, #512]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a7f      	ldr	r2, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b78      	ldr	r3, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a77      	ldr	r2, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xbc>
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f82e 	bl	8000f44 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f82a 	bl	8000f44 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e200      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe4>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f81a 	bl	8000f44 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff f816 	bl	8000f44 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ec      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x10c>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1c0      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4939      	ldr	r1, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ffcf 	bl	8000f44 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe ffcb 	bl	8000f44 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1a1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4927      	ldr	r1, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe ffae 	bl	8000f44 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe ffaa 	bl	8000f44 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e180      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03a      	beq.n	800208c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d019      	beq.n	8002052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe ff8e 	bl	8000f44 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe ff8a 	bl	8000f44 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e160      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 faba 	bl	80025c4 <RCC_Delay>
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe ff74 	bl	8000f44 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7fe ff70 	bl	8000f44 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d908      	bls.n	8002080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e146      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	42420000 	.word	0x42420000
 800207c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e9      	bne.n	8002060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a6 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7fe ff31 	bl	8000f44 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe ff2d 	bl	8000f44 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e103      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x312>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x334>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x356>
 8002144:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fee1 	bl	8000f44 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fedd 	bl	8000f44 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x37e>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fecb 	bl	8000f44 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fec7 	bl	8000f44 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d061      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d146      	bne.n	8002292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fe9b 	bl	8000f44 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fe97 	bl	8000f44 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e06d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d108      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4921      	ldr	r1, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a19      	ldr	r1, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	430b      	orrs	r3, r1
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fe6b 	bl	8000f44 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fe67 	bl	8000f44 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x46a>
 8002290:	e035      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fe54 	bl	8000f44 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fe50 	bl	8000f44 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x498>
 80022be:	e01e      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e019      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x500>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0d0      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4965      	ldr	r1, [pc, #404]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d040      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e073      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fda2 	bl	8000f44 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe fd9e 	bl	8000f44 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e053      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4922      	ldr	r1, [pc, #136]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fd00 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080030e4 	.word	0x080030e4
 80024d8:	20000010 	.word	0x20000010
 80024dc:	20000014 	.word	0x20000014

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x30>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x36>
 800250e:	e027      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	e027      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e004      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	613b      	str	r3, [r7, #16]
      break;
 800255e:	e002      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002566:	693b      	ldr	r3, [r7, #16]
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200
 800257c:	080030fc 	.word	0x080030fc
 8002580:	0800310c 	.word	0x0800310c
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000010 	.word	0x20000010

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080030f4 	.word	0x080030f4

080025c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCC_Delay+0x34>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <RCC_Delay+0x38>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e0:	bf00      	nop
  }
  while (Delay --);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	60fa      	str	r2, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <RCC_Delay+0x1c>
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000010 	.word	0x20000010
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <atoi>:
 8002600:	220a      	movs	r2, #10
 8002602:	2100      	movs	r1, #0
 8002604:	f000 b87e 	b.w	8002704 <strtol>

08002608 <_strtol_l.constprop.0>:
 8002608:	2b01      	cmp	r3, #1
 800260a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800260e:	4686      	mov	lr, r0
 8002610:	4690      	mov	r8, r2
 8002612:	d001      	beq.n	8002618 <_strtol_l.constprop.0+0x10>
 8002614:	2b24      	cmp	r3, #36	; 0x24
 8002616:	d906      	bls.n	8002626 <_strtol_l.constprop.0+0x1e>
 8002618:	f000 f8b6 	bl	8002788 <__errno>
 800261c:	2316      	movs	r3, #22
 800261e:	6003      	str	r3, [r0, #0]
 8002620:	2000      	movs	r0, #0
 8002622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002626:	460d      	mov	r5, r1
 8002628:	4835      	ldr	r0, [pc, #212]	; (8002700 <_strtol_l.constprop.0+0xf8>)
 800262a:	462a      	mov	r2, r5
 800262c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002630:	5d06      	ldrb	r6, [r0, r4]
 8002632:	f016 0608 	ands.w	r6, r6, #8
 8002636:	d1f8      	bne.n	800262a <_strtol_l.constprop.0+0x22>
 8002638:	2c2d      	cmp	r4, #45	; 0x2d
 800263a:	d12e      	bne.n	800269a <_strtol_l.constprop.0+0x92>
 800263c:	2601      	movs	r6, #1
 800263e:	782c      	ldrb	r4, [r5, #0]
 8002640:	1c95      	adds	r5, r2, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d057      	beq.n	80026f6 <_strtol_l.constprop.0+0xee>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d109      	bne.n	800265e <_strtol_l.constprop.0+0x56>
 800264a:	2c30      	cmp	r4, #48	; 0x30
 800264c:	d107      	bne.n	800265e <_strtol_l.constprop.0+0x56>
 800264e:	782a      	ldrb	r2, [r5, #0]
 8002650:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002654:	2a58      	cmp	r2, #88	; 0x58
 8002656:	d149      	bne.n	80026ec <_strtol_l.constprop.0+0xe4>
 8002658:	2310      	movs	r3, #16
 800265a:	786c      	ldrb	r4, [r5, #1]
 800265c:	3502      	adds	r5, #2
 800265e:	2200      	movs	r2, #0
 8002660:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002664:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002668:	fbbc f9f3 	udiv	r9, ip, r3
 800266c:	4610      	mov	r0, r2
 800266e:	fb03 ca19 	mls	sl, r3, r9, ip
 8002672:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002676:	2f09      	cmp	r7, #9
 8002678:	d814      	bhi.n	80026a4 <_strtol_l.constprop.0+0x9c>
 800267a:	463c      	mov	r4, r7
 800267c:	42a3      	cmp	r3, r4
 800267e:	dd20      	ble.n	80026c2 <_strtol_l.constprop.0+0xba>
 8002680:	1c57      	adds	r7, r2, #1
 8002682:	d007      	beq.n	8002694 <_strtol_l.constprop.0+0x8c>
 8002684:	4581      	cmp	r9, r0
 8002686:	d319      	bcc.n	80026bc <_strtol_l.constprop.0+0xb4>
 8002688:	d101      	bne.n	800268e <_strtol_l.constprop.0+0x86>
 800268a:	45a2      	cmp	sl, r4
 800268c:	db16      	blt.n	80026bc <_strtol_l.constprop.0+0xb4>
 800268e:	2201      	movs	r2, #1
 8002690:	fb00 4003 	mla	r0, r0, r3, r4
 8002694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002698:	e7eb      	b.n	8002672 <_strtol_l.constprop.0+0x6a>
 800269a:	2c2b      	cmp	r4, #43	; 0x2b
 800269c:	bf04      	itt	eq
 800269e:	782c      	ldrbeq	r4, [r5, #0]
 80026a0:	1c95      	addeq	r5, r2, #2
 80026a2:	e7ce      	b.n	8002642 <_strtol_l.constprop.0+0x3a>
 80026a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80026a8:	2f19      	cmp	r7, #25
 80026aa:	d801      	bhi.n	80026b0 <_strtol_l.constprop.0+0xa8>
 80026ac:	3c37      	subs	r4, #55	; 0x37
 80026ae:	e7e5      	b.n	800267c <_strtol_l.constprop.0+0x74>
 80026b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80026b4:	2f19      	cmp	r7, #25
 80026b6:	d804      	bhi.n	80026c2 <_strtol_l.constprop.0+0xba>
 80026b8:	3c57      	subs	r4, #87	; 0x57
 80026ba:	e7df      	b.n	800267c <_strtol_l.constprop.0+0x74>
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	e7e8      	b.n	8002694 <_strtol_l.constprop.0+0x8c>
 80026c2:	1c53      	adds	r3, r2, #1
 80026c4:	d108      	bne.n	80026d8 <_strtol_l.constprop.0+0xd0>
 80026c6:	2322      	movs	r3, #34	; 0x22
 80026c8:	4660      	mov	r0, ip
 80026ca:	f8ce 3000 	str.w	r3, [lr]
 80026ce:	f1b8 0f00 	cmp.w	r8, #0
 80026d2:	d0a6      	beq.n	8002622 <_strtol_l.constprop.0+0x1a>
 80026d4:	1e69      	subs	r1, r5, #1
 80026d6:	e006      	b.n	80026e6 <_strtol_l.constprop.0+0xde>
 80026d8:	b106      	cbz	r6, 80026dc <_strtol_l.constprop.0+0xd4>
 80026da:	4240      	negs	r0, r0
 80026dc:	f1b8 0f00 	cmp.w	r8, #0
 80026e0:	d09f      	beq.n	8002622 <_strtol_l.constprop.0+0x1a>
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d1f6      	bne.n	80026d4 <_strtol_l.constprop.0+0xcc>
 80026e6:	f8c8 1000 	str.w	r1, [r8]
 80026ea:	e79a      	b.n	8002622 <_strtol_l.constprop.0+0x1a>
 80026ec:	2430      	movs	r4, #48	; 0x30
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1b5      	bne.n	800265e <_strtol_l.constprop.0+0x56>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e7b3      	b.n	800265e <_strtol_l.constprop.0+0x56>
 80026f6:	2c30      	cmp	r4, #48	; 0x30
 80026f8:	d0a9      	beq.n	800264e <_strtol_l.constprop.0+0x46>
 80026fa:	230a      	movs	r3, #10
 80026fc:	e7af      	b.n	800265e <_strtol_l.constprop.0+0x56>
 80026fe:	bf00      	nop
 8002700:	0800310f 	.word	0x0800310f

08002704 <strtol>:
 8002704:	4613      	mov	r3, r2
 8002706:	460a      	mov	r2, r1
 8002708:	4601      	mov	r1, r0
 800270a:	4802      	ldr	r0, [pc, #8]	; (8002714 <strtol+0x10>)
 800270c:	6800      	ldr	r0, [r0, #0]
 800270e:	f7ff bf7b 	b.w	8002608 <_strtol_l.constprop.0>
 8002712:	bf00      	nop
 8002714:	20000068 	.word	0x20000068

08002718 <siprintf>:
 8002718:	b40e      	push	{r1, r2, r3}
 800271a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800271e:	b500      	push	{lr}
 8002720:	b09c      	sub	sp, #112	; 0x70
 8002722:	ab1d      	add	r3, sp, #116	; 0x74
 8002724:	9002      	str	r0, [sp, #8]
 8002726:	9006      	str	r0, [sp, #24]
 8002728:	9107      	str	r1, [sp, #28]
 800272a:	9104      	str	r1, [sp, #16]
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <siprintf+0x38>)
 800272e:	4909      	ldr	r1, [pc, #36]	; (8002754 <siprintf+0x3c>)
 8002730:	f853 2b04 	ldr.w	r2, [r3], #4
 8002734:	9105      	str	r1, [sp, #20]
 8002736:	6800      	ldr	r0, [r0, #0]
 8002738:	a902      	add	r1, sp, #8
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f000 f99e 	bl	8002a7c <_svfiprintf_r>
 8002740:	2200      	movs	r2, #0
 8002742:	9b02      	ldr	r3, [sp, #8]
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	b01c      	add	sp, #112	; 0x70
 8002748:	f85d eb04 	ldr.w	lr, [sp], #4
 800274c:	b003      	add	sp, #12
 800274e:	4770      	bx	lr
 8002750:	20000068 	.word	0x20000068
 8002754:	ffff0208 	.word	0xffff0208

08002758 <memset>:
 8002758:	4603      	mov	r3, r0
 800275a:	4402      	add	r2, r0
 800275c:	4293      	cmp	r3, r2
 800275e:	d100      	bne.n	8002762 <memset+0xa>
 8002760:	4770      	bx	lr
 8002762:	f803 1b01 	strb.w	r1, [r3], #1
 8002766:	e7f9      	b.n	800275c <memset+0x4>

08002768 <strcat>:
 8002768:	4602      	mov	r2, r0
 800276a:	b510      	push	{r4, lr}
 800276c:	7814      	ldrb	r4, [r2, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	3201      	adds	r2, #1
 8002772:	2c00      	cmp	r4, #0
 8002774:	d1fa      	bne.n	800276c <strcat+0x4>
 8002776:	3b01      	subs	r3, #1
 8002778:	f811 2b01 	ldrb.w	r2, [r1], #1
 800277c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002780:	2a00      	cmp	r2, #0
 8002782:	d1f9      	bne.n	8002778 <strcat+0x10>
 8002784:	bd10      	pop	{r4, pc}
	...

08002788 <__errno>:
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <__errno+0x8>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000068 	.word	0x20000068

08002794 <__libc_init_array>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	2600      	movs	r6, #0
 8002798:	4d0c      	ldr	r5, [pc, #48]	; (80027cc <__libc_init_array+0x38>)
 800279a:	4c0d      	ldr	r4, [pc, #52]	; (80027d0 <__libc_init_array+0x3c>)
 800279c:	1b64      	subs	r4, r4, r5
 800279e:	10a4      	asrs	r4, r4, #2
 80027a0:	42a6      	cmp	r6, r4
 80027a2:	d109      	bne.n	80027b8 <__libc_init_array+0x24>
 80027a4:	f000 fc7a 	bl	800309c <_init>
 80027a8:	2600      	movs	r6, #0
 80027aa:	4d0a      	ldr	r5, [pc, #40]	; (80027d4 <__libc_init_array+0x40>)
 80027ac:	4c0a      	ldr	r4, [pc, #40]	; (80027d8 <__libc_init_array+0x44>)
 80027ae:	1b64      	subs	r4, r4, r5
 80027b0:	10a4      	asrs	r4, r4, #2
 80027b2:	42a6      	cmp	r6, r4
 80027b4:	d105      	bne.n	80027c2 <__libc_init_array+0x2e>
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027bc:	4798      	blx	r3
 80027be:	3601      	adds	r6, #1
 80027c0:	e7ee      	b.n	80027a0 <__libc_init_array+0xc>
 80027c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c6:	4798      	blx	r3
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7f2      	b.n	80027b2 <__libc_init_array+0x1e>
 80027cc:	08003244 	.word	0x08003244
 80027d0:	08003244 	.word	0x08003244
 80027d4:	08003244 	.word	0x08003244
 80027d8:	08003248 	.word	0x08003248

080027dc <__retarget_lock_acquire_recursive>:
 80027dc:	4770      	bx	lr

080027de <__retarget_lock_release_recursive>:
 80027de:	4770      	bx	lr

080027e0 <_free_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4605      	mov	r5, r0
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d040      	beq.n	800286a <_free_r+0x8a>
 80027e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ec:	1f0c      	subs	r4, r1, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bfb8      	it	lt
 80027f2:	18e4      	addlt	r4, r4, r3
 80027f4:	f000 f8dc 	bl	80029b0 <__malloc_lock>
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <_free_r+0x8c>)
 80027fa:	6813      	ldr	r3, [r2, #0]
 80027fc:	b933      	cbnz	r3, 800280c <_free_r+0x2c>
 80027fe:	6063      	str	r3, [r4, #4]
 8002800:	6014      	str	r4, [r2, #0]
 8002802:	4628      	mov	r0, r5
 8002804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002808:	f000 b8d8 	b.w	80029bc <__malloc_unlock>
 800280c:	42a3      	cmp	r3, r4
 800280e:	d908      	bls.n	8002822 <_free_r+0x42>
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	1821      	adds	r1, r4, r0
 8002814:	428b      	cmp	r3, r1
 8002816:	bf01      	itttt	eq
 8002818:	6819      	ldreq	r1, [r3, #0]
 800281a:	685b      	ldreq	r3, [r3, #4]
 800281c:	1809      	addeq	r1, r1, r0
 800281e:	6021      	streq	r1, [r4, #0]
 8002820:	e7ed      	b.n	80027fe <_free_r+0x1e>
 8002822:	461a      	mov	r2, r3
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b10b      	cbz	r3, 800282c <_free_r+0x4c>
 8002828:	42a3      	cmp	r3, r4
 800282a:	d9fa      	bls.n	8002822 <_free_r+0x42>
 800282c:	6811      	ldr	r1, [r2, #0]
 800282e:	1850      	adds	r0, r2, r1
 8002830:	42a0      	cmp	r0, r4
 8002832:	d10b      	bne.n	800284c <_free_r+0x6c>
 8002834:	6820      	ldr	r0, [r4, #0]
 8002836:	4401      	add	r1, r0
 8002838:	1850      	adds	r0, r2, r1
 800283a:	4283      	cmp	r3, r0
 800283c:	6011      	str	r1, [r2, #0]
 800283e:	d1e0      	bne.n	8002802 <_free_r+0x22>
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4408      	add	r0, r1
 8002846:	6010      	str	r0, [r2, #0]
 8002848:	6053      	str	r3, [r2, #4]
 800284a:	e7da      	b.n	8002802 <_free_r+0x22>
 800284c:	d902      	bls.n	8002854 <_free_r+0x74>
 800284e:	230c      	movs	r3, #12
 8002850:	602b      	str	r3, [r5, #0]
 8002852:	e7d6      	b.n	8002802 <_free_r+0x22>
 8002854:	6820      	ldr	r0, [r4, #0]
 8002856:	1821      	adds	r1, r4, r0
 8002858:	428b      	cmp	r3, r1
 800285a:	bf01      	itttt	eq
 800285c:	6819      	ldreq	r1, [r3, #0]
 800285e:	685b      	ldreq	r3, [r3, #4]
 8002860:	1809      	addeq	r1, r1, r0
 8002862:	6021      	streq	r1, [r4, #0]
 8002864:	6063      	str	r3, [r4, #4]
 8002866:	6054      	str	r4, [r2, #4]
 8002868:	e7cb      	b.n	8002802 <_free_r+0x22>
 800286a:	bd38      	pop	{r3, r4, r5, pc}
 800286c:	20000264 	.word	0x20000264

08002870 <sbrk_aligned>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	4e0e      	ldr	r6, [pc, #56]	; (80028ac <sbrk_aligned+0x3c>)
 8002874:	460c      	mov	r4, r1
 8002876:	6831      	ldr	r1, [r6, #0]
 8002878:	4605      	mov	r5, r0
 800287a:	b911      	cbnz	r1, 8002882 <sbrk_aligned+0x12>
 800287c:	f000 fbaa 	bl	8002fd4 <_sbrk_r>
 8002880:	6030      	str	r0, [r6, #0]
 8002882:	4621      	mov	r1, r4
 8002884:	4628      	mov	r0, r5
 8002886:	f000 fba5 	bl	8002fd4 <_sbrk_r>
 800288a:	1c43      	adds	r3, r0, #1
 800288c:	d00a      	beq.n	80028a4 <sbrk_aligned+0x34>
 800288e:	1cc4      	adds	r4, r0, #3
 8002890:	f024 0403 	bic.w	r4, r4, #3
 8002894:	42a0      	cmp	r0, r4
 8002896:	d007      	beq.n	80028a8 <sbrk_aligned+0x38>
 8002898:	1a21      	subs	r1, r4, r0
 800289a:	4628      	mov	r0, r5
 800289c:	f000 fb9a 	bl	8002fd4 <_sbrk_r>
 80028a0:	3001      	adds	r0, #1
 80028a2:	d101      	bne.n	80028a8 <sbrk_aligned+0x38>
 80028a4:	f04f 34ff 	mov.w	r4, #4294967295
 80028a8:	4620      	mov	r0, r4
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	20000268 	.word	0x20000268

080028b0 <_malloc_r>:
 80028b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b4:	1ccd      	adds	r5, r1, #3
 80028b6:	f025 0503 	bic.w	r5, r5, #3
 80028ba:	3508      	adds	r5, #8
 80028bc:	2d0c      	cmp	r5, #12
 80028be:	bf38      	it	cc
 80028c0:	250c      	movcc	r5, #12
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	4607      	mov	r7, r0
 80028c6:	db01      	blt.n	80028cc <_malloc_r+0x1c>
 80028c8:	42a9      	cmp	r1, r5
 80028ca:	d905      	bls.n	80028d8 <_malloc_r+0x28>
 80028cc:	230c      	movs	r3, #12
 80028ce:	2600      	movs	r6, #0
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4630      	mov	r0, r6
 80028d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029ac <_malloc_r+0xfc>
 80028dc:	f000 f868 	bl	80029b0 <__malloc_lock>
 80028e0:	f8d8 3000 	ldr.w	r3, [r8]
 80028e4:	461c      	mov	r4, r3
 80028e6:	bb5c      	cbnz	r4, 8002940 <_malloc_r+0x90>
 80028e8:	4629      	mov	r1, r5
 80028ea:	4638      	mov	r0, r7
 80028ec:	f7ff ffc0 	bl	8002870 <sbrk_aligned>
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	4604      	mov	r4, r0
 80028f4:	d155      	bne.n	80029a2 <_malloc_r+0xf2>
 80028f6:	f8d8 4000 	ldr.w	r4, [r8]
 80028fa:	4626      	mov	r6, r4
 80028fc:	2e00      	cmp	r6, #0
 80028fe:	d145      	bne.n	800298c <_malloc_r+0xdc>
 8002900:	2c00      	cmp	r4, #0
 8002902:	d048      	beq.n	8002996 <_malloc_r+0xe6>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	4631      	mov	r1, r6
 8002908:	4638      	mov	r0, r7
 800290a:	eb04 0903 	add.w	r9, r4, r3
 800290e:	f000 fb61 	bl	8002fd4 <_sbrk_r>
 8002912:	4581      	cmp	r9, r0
 8002914:	d13f      	bne.n	8002996 <_malloc_r+0xe6>
 8002916:	6821      	ldr	r1, [r4, #0]
 8002918:	4638      	mov	r0, r7
 800291a:	1a6d      	subs	r5, r5, r1
 800291c:	4629      	mov	r1, r5
 800291e:	f7ff ffa7 	bl	8002870 <sbrk_aligned>
 8002922:	3001      	adds	r0, #1
 8002924:	d037      	beq.n	8002996 <_malloc_r+0xe6>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	442b      	add	r3, r5
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	f8d8 3000 	ldr.w	r3, [r8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d038      	beq.n	80029a6 <_malloc_r+0xf6>
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	42a2      	cmp	r2, r4
 8002938:	d12b      	bne.n	8002992 <_malloc_r+0xe2>
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e00f      	b.n	8002960 <_malloc_r+0xb0>
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	1b52      	subs	r2, r2, r5
 8002944:	d41f      	bmi.n	8002986 <_malloc_r+0xd6>
 8002946:	2a0b      	cmp	r2, #11
 8002948:	d917      	bls.n	800297a <_malloc_r+0xca>
 800294a:	1961      	adds	r1, r4, r5
 800294c:	42a3      	cmp	r3, r4
 800294e:	6025      	str	r5, [r4, #0]
 8002950:	bf18      	it	ne
 8002952:	6059      	strne	r1, [r3, #4]
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	bf08      	it	eq
 8002958:	f8c8 1000 	streq.w	r1, [r8]
 800295c:	5162      	str	r2, [r4, r5]
 800295e:	604b      	str	r3, [r1, #4]
 8002960:	4638      	mov	r0, r7
 8002962:	f104 060b 	add.w	r6, r4, #11
 8002966:	f000 f829 	bl	80029bc <__malloc_unlock>
 800296a:	f026 0607 	bic.w	r6, r6, #7
 800296e:	1d23      	adds	r3, r4, #4
 8002970:	1af2      	subs	r2, r6, r3
 8002972:	d0ae      	beq.n	80028d2 <_malloc_r+0x22>
 8002974:	1b9b      	subs	r3, r3, r6
 8002976:	50a3      	str	r3, [r4, r2]
 8002978:	e7ab      	b.n	80028d2 <_malloc_r+0x22>
 800297a:	42a3      	cmp	r3, r4
 800297c:	6862      	ldr	r2, [r4, #4]
 800297e:	d1dd      	bne.n	800293c <_malloc_r+0x8c>
 8002980:	f8c8 2000 	str.w	r2, [r8]
 8002984:	e7ec      	b.n	8002960 <_malloc_r+0xb0>
 8002986:	4623      	mov	r3, r4
 8002988:	6864      	ldr	r4, [r4, #4]
 800298a:	e7ac      	b.n	80028e6 <_malloc_r+0x36>
 800298c:	4634      	mov	r4, r6
 800298e:	6876      	ldr	r6, [r6, #4]
 8002990:	e7b4      	b.n	80028fc <_malloc_r+0x4c>
 8002992:	4613      	mov	r3, r2
 8002994:	e7cc      	b.n	8002930 <_malloc_r+0x80>
 8002996:	230c      	movs	r3, #12
 8002998:	4638      	mov	r0, r7
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	f000 f80e 	bl	80029bc <__malloc_unlock>
 80029a0:	e797      	b.n	80028d2 <_malloc_r+0x22>
 80029a2:	6025      	str	r5, [r4, #0]
 80029a4:	e7dc      	b.n	8002960 <_malloc_r+0xb0>
 80029a6:	605b      	str	r3, [r3, #4]
 80029a8:	deff      	udf	#255	; 0xff
 80029aa:	bf00      	nop
 80029ac:	20000264 	.word	0x20000264

080029b0 <__malloc_lock>:
 80029b0:	4801      	ldr	r0, [pc, #4]	; (80029b8 <__malloc_lock+0x8>)
 80029b2:	f7ff bf13 	b.w	80027dc <__retarget_lock_acquire_recursive>
 80029b6:	bf00      	nop
 80029b8:	20000260 	.word	0x20000260

080029bc <__malloc_unlock>:
 80029bc:	4801      	ldr	r0, [pc, #4]	; (80029c4 <__malloc_unlock+0x8>)
 80029be:	f7ff bf0e 	b.w	80027de <__retarget_lock_release_recursive>
 80029c2:	bf00      	nop
 80029c4:	20000260 	.word	0x20000260

080029c8 <__ssputs_r>:
 80029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	461f      	mov	r7, r3
 80029ce:	688e      	ldr	r6, [r1, #8]
 80029d0:	4682      	mov	sl, r0
 80029d2:	42be      	cmp	r6, r7
 80029d4:	460c      	mov	r4, r1
 80029d6:	4690      	mov	r8, r2
 80029d8:	680b      	ldr	r3, [r1, #0]
 80029da:	d82c      	bhi.n	8002a36 <__ssputs_r+0x6e>
 80029dc:	898a      	ldrh	r2, [r1, #12]
 80029de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029e2:	d026      	beq.n	8002a32 <__ssputs_r+0x6a>
 80029e4:	6965      	ldr	r5, [r4, #20]
 80029e6:	6909      	ldr	r1, [r1, #16]
 80029e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ec:	eba3 0901 	sub.w	r9, r3, r1
 80029f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029f4:	1c7b      	adds	r3, r7, #1
 80029f6:	444b      	add	r3, r9
 80029f8:	106d      	asrs	r5, r5, #1
 80029fa:	429d      	cmp	r5, r3
 80029fc:	bf38      	it	cc
 80029fe:	461d      	movcc	r5, r3
 8002a00:	0553      	lsls	r3, r2, #21
 8002a02:	d527      	bpl.n	8002a54 <__ssputs_r+0x8c>
 8002a04:	4629      	mov	r1, r5
 8002a06:	f7ff ff53 	bl	80028b0 <_malloc_r>
 8002a0a:	4606      	mov	r6, r0
 8002a0c:	b360      	cbz	r0, 8002a68 <__ssputs_r+0xa0>
 8002a0e:	464a      	mov	r2, r9
 8002a10:	6921      	ldr	r1, [r4, #16]
 8002a12:	f000 fafd 	bl	8003010 <memcpy>
 8002a16:	89a3      	ldrh	r3, [r4, #12]
 8002a18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	6126      	str	r6, [r4, #16]
 8002a24:	444e      	add	r6, r9
 8002a26:	6026      	str	r6, [r4, #0]
 8002a28:	463e      	mov	r6, r7
 8002a2a:	6165      	str	r5, [r4, #20]
 8002a2c:	eba5 0509 	sub.w	r5, r5, r9
 8002a30:	60a5      	str	r5, [r4, #8]
 8002a32:	42be      	cmp	r6, r7
 8002a34:	d900      	bls.n	8002a38 <__ssputs_r+0x70>
 8002a36:	463e      	mov	r6, r7
 8002a38:	4632      	mov	r2, r6
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	6820      	ldr	r0, [r4, #0]
 8002a3e:	f000 faaf 	bl	8002fa0 <memmove>
 8002a42:	2000      	movs	r0, #0
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	1b9b      	subs	r3, r3, r6
 8002a48:	60a3      	str	r3, [r4, #8]
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	4433      	add	r3, r6
 8002a4e:	6023      	str	r3, [r4, #0]
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a54:	462a      	mov	r2, r5
 8002a56:	f000 fae9 	bl	800302c <_realloc_r>
 8002a5a:	4606      	mov	r6, r0
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d1e0      	bne.n	8002a22 <__ssputs_r+0x5a>
 8002a60:	4650      	mov	r0, sl
 8002a62:	6921      	ldr	r1, [r4, #16]
 8002a64:	f7ff febc 	bl	80027e0 <_free_r>
 8002a68:	230c      	movs	r3, #12
 8002a6a:	f8ca 3000 	str.w	r3, [sl]
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a78:	81a3      	strh	r3, [r4, #12]
 8002a7a:	e7e9      	b.n	8002a50 <__ssputs_r+0x88>

08002a7c <_svfiprintf_r>:
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	4698      	mov	r8, r3
 8002a82:	898b      	ldrh	r3, [r1, #12]
 8002a84:	4607      	mov	r7, r0
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	460d      	mov	r5, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	b09d      	sub	sp, #116	; 0x74
 8002a8e:	d50e      	bpl.n	8002aae <_svfiprintf_r+0x32>
 8002a90:	690b      	ldr	r3, [r1, #16]
 8002a92:	b963      	cbnz	r3, 8002aae <_svfiprintf_r+0x32>
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	f7ff ff0b 	bl	80028b0 <_malloc_r>
 8002a9a:	6028      	str	r0, [r5, #0]
 8002a9c:	6128      	str	r0, [r5, #16]
 8002a9e:	b920      	cbnz	r0, 8002aaa <_svfiprintf_r+0x2e>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	e0d0      	b.n	8002c4c <_svfiprintf_r+0x1d0>
 8002aaa:	2340      	movs	r3, #64	; 0x40
 8002aac:	616b      	str	r3, [r5, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab8:	2330      	movs	r3, #48	; 0x30
 8002aba:	f04f 0901 	mov.w	r9, #1
 8002abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ac2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c64 <_svfiprintf_r+0x1e8>
 8002ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aca:	4623      	mov	r3, r4
 8002acc:	469a      	mov	sl, r3
 8002ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad2:	b10a      	cbz	r2, 8002ad8 <_svfiprintf_r+0x5c>
 8002ad4:	2a25      	cmp	r2, #37	; 0x25
 8002ad6:	d1f9      	bne.n	8002acc <_svfiprintf_r+0x50>
 8002ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8002adc:	d00b      	beq.n	8002af6 <_svfiprintf_r+0x7a>
 8002ade:	465b      	mov	r3, fp
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	f7ff ff6f 	bl	80029c8 <__ssputs_r>
 8002aea:	3001      	adds	r0, #1
 8002aec:	f000 80a9 	beq.w	8002c42 <_svfiprintf_r+0x1c6>
 8002af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002af2:	445a      	add	r2, fp
 8002af4:	9209      	str	r2, [sp, #36]	; 0x24
 8002af6:	f89a 3000 	ldrb.w	r3, [sl]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80a1 	beq.w	8002c42 <_svfiprintf_r+0x1c6>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295
 8002b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b0a:	f10a 0a01 	add.w	sl, sl, #1
 8002b0e:	9304      	str	r3, [sp, #16]
 8002b10:	9307      	str	r3, [sp, #28]
 8002b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b16:	931a      	str	r3, [sp, #104]	; 0x68
 8002b18:	4654      	mov	r4, sl
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b20:	4850      	ldr	r0, [pc, #320]	; (8002c64 <_svfiprintf_r+0x1e8>)
 8002b22:	f000 fa67 	bl	8002ff4 <memchr>
 8002b26:	9a04      	ldr	r2, [sp, #16]
 8002b28:	b9d8      	cbnz	r0, 8002b62 <_svfiprintf_r+0xe6>
 8002b2a:	06d0      	lsls	r0, r2, #27
 8002b2c:	bf44      	itt	mi
 8002b2e:	2320      	movmi	r3, #32
 8002b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b34:	0711      	lsls	r1, r2, #28
 8002b36:	bf44      	itt	mi
 8002b38:	232b      	movmi	r3, #43	; 0x2b
 8002b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b42:	2b2a      	cmp	r3, #42	; 0x2a
 8002b44:	d015      	beq.n	8002b72 <_svfiprintf_r+0xf6>
 8002b46:	4654      	mov	r4, sl
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f04f 0c0a 	mov.w	ip, #10
 8002b4e:	9a07      	ldr	r2, [sp, #28]
 8002b50:	4621      	mov	r1, r4
 8002b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b56:	3b30      	subs	r3, #48	; 0x30
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d94d      	bls.n	8002bf8 <_svfiprintf_r+0x17c>
 8002b5c:	b1b0      	cbz	r0, 8002b8c <_svfiprintf_r+0x110>
 8002b5e:	9207      	str	r2, [sp, #28]
 8002b60:	e014      	b.n	8002b8c <_svfiprintf_r+0x110>
 8002b62:	eba0 0308 	sub.w	r3, r0, r8
 8002b66:	fa09 f303 	lsl.w	r3, r9, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	46a2      	mov	sl, r4
 8002b6e:	9304      	str	r3, [sp, #16]
 8002b70:	e7d2      	b.n	8002b18 <_svfiprintf_r+0x9c>
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	1d19      	adds	r1, r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	9103      	str	r1, [sp, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bfbb      	ittet	lt
 8002b7e:	425b      	neglt	r3, r3
 8002b80:	f042 0202 	orrlt.w	r2, r2, #2
 8002b84:	9307      	strge	r3, [sp, #28]
 8002b86:	9307      	strlt	r3, [sp, #28]
 8002b88:	bfb8      	it	lt
 8002b8a:	9204      	strlt	r2, [sp, #16]
 8002b8c:	7823      	ldrb	r3, [r4, #0]
 8002b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b90:	d10c      	bne.n	8002bac <_svfiprintf_r+0x130>
 8002b92:	7863      	ldrb	r3, [r4, #1]
 8002b94:	2b2a      	cmp	r3, #42	; 0x2a
 8002b96:	d134      	bne.n	8002c02 <_svfiprintf_r+0x186>
 8002b98:	9b03      	ldr	r3, [sp, #12]
 8002b9a:	3402      	adds	r4, #2
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	9203      	str	r2, [sp, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bfb8      	it	lt
 8002ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c68 <_svfiprintf_r+0x1ec>
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4650      	mov	r0, sl
 8002bb4:	7821      	ldrb	r1, [r4, #0]
 8002bb6:	f000 fa1d 	bl	8002ff4 <memchr>
 8002bba:	b138      	cbz	r0, 8002bcc <_svfiprintf_r+0x150>
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	9b04      	ldr	r3, [sp, #16]
 8002bc0:	eba0 000a 	sub.w	r0, r0, sl
 8002bc4:	4082      	lsls	r2, r0
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	3401      	adds	r4, #1
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	4826      	ldr	r0, [pc, #152]	; (8002c6c <_svfiprintf_r+0x1f0>)
 8002bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd8:	f000 fa0c 	bl	8002ff4 <memchr>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d038      	beq.n	8002c52 <_svfiprintf_r+0x1d6>
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <_svfiprintf_r+0x1f4>)
 8002be2:	bb1b      	cbnz	r3, 8002c2c <_svfiprintf_r+0x1b0>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	3307      	adds	r3, #7
 8002be8:	f023 0307 	bic.w	r3, r3, #7
 8002bec:	3308      	adds	r3, #8
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf2:	4433      	add	r3, r6
 8002bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf6:	e768      	b.n	8002aca <_svfiprintf_r+0x4e>
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c00:	e7a6      	b.n	8002b50 <_svfiprintf_r+0xd4>
 8002c02:	2300      	movs	r3, #0
 8002c04:	f04f 0c0a 	mov.w	ip, #10
 8002c08:	4619      	mov	r1, r3
 8002c0a:	3401      	adds	r4, #1
 8002c0c:	9305      	str	r3, [sp, #20]
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c14:	3a30      	subs	r2, #48	; 0x30
 8002c16:	2a09      	cmp	r2, #9
 8002c18:	d903      	bls.n	8002c22 <_svfiprintf_r+0x1a6>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0c6      	beq.n	8002bac <_svfiprintf_r+0x130>
 8002c1e:	9105      	str	r1, [sp, #20]
 8002c20:	e7c4      	b.n	8002bac <_svfiprintf_r+0x130>
 8002c22:	4604      	mov	r4, r0
 8002c24:	2301      	movs	r3, #1
 8002c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c2a:	e7f0      	b.n	8002c0e <_svfiprintf_r+0x192>
 8002c2c:	ab03      	add	r3, sp, #12
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4638      	mov	r0, r7
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <_svfiprintf_r+0x1f8>)
 8002c36:	a904      	add	r1, sp, #16
 8002c38:	f3af 8000 	nop.w
 8002c3c:	1c42      	adds	r2, r0, #1
 8002c3e:	4606      	mov	r6, r0
 8002c40:	d1d6      	bne.n	8002bf0 <_svfiprintf_r+0x174>
 8002c42:	89ab      	ldrh	r3, [r5, #12]
 8002c44:	065b      	lsls	r3, r3, #25
 8002c46:	f53f af2d 	bmi.w	8002aa4 <_svfiprintf_r+0x28>
 8002c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c4c:	b01d      	add	sp, #116	; 0x74
 8002c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c52:	ab03      	add	r3, sp, #12
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	462a      	mov	r2, r5
 8002c58:	4638      	mov	r0, r7
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <_svfiprintf_r+0x1f8>)
 8002c5c:	a904      	add	r1, sp, #16
 8002c5e:	f000 f87d 	bl	8002d5c <_printf_i>
 8002c62:	e7eb      	b.n	8002c3c <_svfiprintf_r+0x1c0>
 8002c64:	0800320f 	.word	0x0800320f
 8002c68:	08003215 	.word	0x08003215
 8002c6c:	08003219 	.word	0x08003219
 8002c70:	00000000 	.word	0x00000000
 8002c74:	080029c9 	.word	0x080029c9

08002c78 <_printf_common>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	4616      	mov	r6, r2
 8002c7e:	4699      	mov	r9, r3
 8002c80:	688a      	ldr	r2, [r1, #8]
 8002c82:	690b      	ldr	r3, [r1, #16]
 8002c84:	4607      	mov	r7, r0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bfb8      	it	lt
 8002c8a:	4613      	movlt	r3, r2
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c92:	460c      	mov	r4, r1
 8002c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c98:	b10a      	cbz	r2, 8002c9e <_printf_common+0x26>
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	6033      	str	r3, [r6, #0]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	0699      	lsls	r1, r3, #26
 8002ca2:	bf42      	ittt	mi
 8002ca4:	6833      	ldrmi	r3, [r6, #0]
 8002ca6:	3302      	addmi	r3, #2
 8002ca8:	6033      	strmi	r3, [r6, #0]
 8002caa:	6825      	ldr	r5, [r4, #0]
 8002cac:	f015 0506 	ands.w	r5, r5, #6
 8002cb0:	d106      	bne.n	8002cc0 <_printf_common+0x48>
 8002cb2:	f104 0a19 	add.w	sl, r4, #25
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	6832      	ldr	r2, [r6, #0]
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	42ab      	cmp	r3, r5
 8002cbe:	dc2b      	bgt.n	8002d18 <_printf_common+0xa0>
 8002cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cc4:	1e13      	subs	r3, r2, #0
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	bf18      	it	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	0692      	lsls	r2, r2, #26
 8002cce:	d430      	bmi.n	8002d32 <_printf_common+0xba>
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cd8:	47c0      	blx	r8
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d023      	beq.n	8002d26 <_printf_common+0xae>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	6922      	ldr	r2, [r4, #16]
 8002ce2:	f003 0306 	and.w	r3, r3, #6
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf14      	ite	ne
 8002cea:	2500      	movne	r5, #0
 8002cec:	6833      	ldreq	r3, [r6, #0]
 8002cee:	f04f 0600 	mov.w	r6, #0
 8002cf2:	bf08      	it	eq
 8002cf4:	68e5      	ldreq	r5, [r4, #12]
 8002cf6:	f104 041a 	add.w	r4, r4, #26
 8002cfa:	bf08      	it	eq
 8002cfc:	1aed      	subeq	r5, r5, r3
 8002cfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d02:	bf08      	it	eq
 8002d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bfc4      	itt	gt
 8002d0c:	1a9b      	subgt	r3, r3, r2
 8002d0e:	18ed      	addgt	r5, r5, r3
 8002d10:	42b5      	cmp	r5, r6
 8002d12:	d11a      	bne.n	8002d4a <_printf_common+0xd2>
 8002d14:	2000      	movs	r0, #0
 8002d16:	e008      	b.n	8002d2a <_printf_common+0xb2>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4652      	mov	r2, sl
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	4638      	mov	r0, r7
 8002d20:	47c0      	blx	r8
 8002d22:	3001      	adds	r0, #1
 8002d24:	d103      	bne.n	8002d2e <_printf_common+0xb6>
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2e:	3501      	adds	r5, #1
 8002d30:	e7c1      	b.n	8002cb6 <_printf_common+0x3e>
 8002d32:	2030      	movs	r0, #48	; 0x30
 8002d34:	18e1      	adds	r1, r4, r3
 8002d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d40:	4422      	add	r2, r4
 8002d42:	3302      	adds	r3, #2
 8002d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d48:	e7c2      	b.n	8002cd0 <_printf_common+0x58>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4649      	mov	r1, r9
 8002d50:	4638      	mov	r0, r7
 8002d52:	47c0      	blx	r8
 8002d54:	3001      	adds	r0, #1
 8002d56:	d0e6      	beq.n	8002d26 <_printf_common+0xae>
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7d9      	b.n	8002d10 <_printf_common+0x98>

08002d5c <_printf_i>:
 8002d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d60:	7e0f      	ldrb	r7, [r1, #24]
 8002d62:	4691      	mov	r9, r2
 8002d64:	2f78      	cmp	r7, #120	; 0x78
 8002d66:	4680      	mov	r8, r0
 8002d68:	460c      	mov	r4, r1
 8002d6a:	469a      	mov	sl, r3
 8002d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d72:	d807      	bhi.n	8002d84 <_printf_i+0x28>
 8002d74:	2f62      	cmp	r7, #98	; 0x62
 8002d76:	d80a      	bhi.n	8002d8e <_printf_i+0x32>
 8002d78:	2f00      	cmp	r7, #0
 8002d7a:	f000 80d5 	beq.w	8002f28 <_printf_i+0x1cc>
 8002d7e:	2f58      	cmp	r7, #88	; 0x58
 8002d80:	f000 80c1 	beq.w	8002f06 <_printf_i+0x1aa>
 8002d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d8c:	e03a      	b.n	8002e04 <_printf_i+0xa8>
 8002d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d92:	2b15      	cmp	r3, #21
 8002d94:	d8f6      	bhi.n	8002d84 <_printf_i+0x28>
 8002d96:	a101      	add	r1, pc, #4	; (adr r1, 8002d9c <_printf_i+0x40>)
 8002d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d9c:	08002df5 	.word	0x08002df5
 8002da0:	08002e09 	.word	0x08002e09
 8002da4:	08002d85 	.word	0x08002d85
 8002da8:	08002d85 	.word	0x08002d85
 8002dac:	08002d85 	.word	0x08002d85
 8002db0:	08002d85 	.word	0x08002d85
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002d85 	.word	0x08002d85
 8002dbc:	08002d85 	.word	0x08002d85
 8002dc0:	08002d85 	.word	0x08002d85
 8002dc4:	08002d85 	.word	0x08002d85
 8002dc8:	08002f0f 	.word	0x08002f0f
 8002dcc:	08002e35 	.word	0x08002e35
 8002dd0:	08002ec9 	.word	0x08002ec9
 8002dd4:	08002d85 	.word	0x08002d85
 8002dd8:	08002d85 	.word	0x08002d85
 8002ddc:	08002f31 	.word	0x08002f31
 8002de0:	08002d85 	.word	0x08002d85
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08002d85 	.word	0x08002d85
 8002dec:	08002d85 	.word	0x08002d85
 8002df0:	08002ed1 	.word	0x08002ed1
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	1d1a      	adds	r2, r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	602a      	str	r2, [r5, #0]
 8002dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0a0      	b.n	8002f4a <_printf_i+0x1ee>
 8002e08:	6820      	ldr	r0, [r4, #0]
 8002e0a:	682b      	ldr	r3, [r5, #0]
 8002e0c:	0607      	lsls	r7, r0, #24
 8002e0e:	f103 0104 	add.w	r1, r3, #4
 8002e12:	6029      	str	r1, [r5, #0]
 8002e14:	d501      	bpl.n	8002e1a <_printf_i+0xbe>
 8002e16:	681e      	ldr	r6, [r3, #0]
 8002e18:	e003      	b.n	8002e22 <_printf_i+0xc6>
 8002e1a:	0646      	lsls	r6, r0, #25
 8002e1c:	d5fb      	bpl.n	8002e16 <_printf_i+0xba>
 8002e1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e22:	2e00      	cmp	r6, #0
 8002e24:	da03      	bge.n	8002e2e <_printf_i+0xd2>
 8002e26:	232d      	movs	r3, #45	; 0x2d
 8002e28:	4276      	negs	r6, r6
 8002e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e2e:	230a      	movs	r3, #10
 8002e30:	4859      	ldr	r0, [pc, #356]	; (8002f98 <_printf_i+0x23c>)
 8002e32:	e012      	b.n	8002e5a <_printf_i+0xfe>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	1d19      	adds	r1, r3, #4
 8002e3a:	6029      	str	r1, [r5, #0]
 8002e3c:	0605      	lsls	r5, r0, #24
 8002e3e:	d501      	bpl.n	8002e44 <_printf_i+0xe8>
 8002e40:	681e      	ldr	r6, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <_printf_i+0xee>
 8002e44:	0641      	lsls	r1, r0, #25
 8002e46:	d5fb      	bpl.n	8002e40 <_printf_i+0xe4>
 8002e48:	881e      	ldrh	r6, [r3, #0]
 8002e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2308      	moveq	r3, #8
 8002e50:	230a      	movne	r3, #10
 8002e52:	4851      	ldr	r0, [pc, #324]	; (8002f98 <_printf_i+0x23c>)
 8002e54:	2100      	movs	r1, #0
 8002e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e5a:	6865      	ldr	r5, [r4, #4]
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	bfa8      	it	ge
 8002e60:	6821      	ldrge	r1, [r4, #0]
 8002e62:	60a5      	str	r5, [r4, #8]
 8002e64:	bfa4      	itt	ge
 8002e66:	f021 0104 	bicge.w	r1, r1, #4
 8002e6a:	6021      	strge	r1, [r4, #0]
 8002e6c:	b90e      	cbnz	r6, 8002e72 <_printf_i+0x116>
 8002e6e:	2d00      	cmp	r5, #0
 8002e70:	d04b      	beq.n	8002f0a <_printf_i+0x1ae>
 8002e72:	4615      	mov	r5, r2
 8002e74:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e78:	fb03 6711 	mls	r7, r3, r1, r6
 8002e7c:	5dc7      	ldrb	r7, [r0, r7]
 8002e7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e82:	4637      	mov	r7, r6
 8002e84:	42bb      	cmp	r3, r7
 8002e86:	460e      	mov	r6, r1
 8002e88:	d9f4      	bls.n	8002e74 <_printf_i+0x118>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d10b      	bne.n	8002ea6 <_printf_i+0x14a>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	07de      	lsls	r6, r3, #31
 8002e92:	d508      	bpl.n	8002ea6 <_printf_i+0x14a>
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	6861      	ldr	r1, [r4, #4]
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	bfde      	ittt	le
 8002e9c:	2330      	movle	r3, #48	; 0x30
 8002e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ea6:	1b52      	subs	r2, r2, r5
 8002ea8:	6122      	str	r2, [r4, #16]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	4621      	mov	r1, r4
 8002eae:	4640      	mov	r0, r8
 8002eb0:	f8cd a000 	str.w	sl, [sp]
 8002eb4:	aa03      	add	r2, sp, #12
 8002eb6:	f7ff fedf 	bl	8002c78 <_printf_common>
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d14a      	bne.n	8002f54 <_printf_i+0x1f8>
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	b004      	add	sp, #16
 8002ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	2778      	movs	r7, #120	; 0x78
 8002ed2:	4832      	ldr	r0, [pc, #200]	; (8002f9c <_printf_i+0x240>)
 8002ed4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	6829      	ldr	r1, [r5, #0]
 8002edc:	061f      	lsls	r7, r3, #24
 8002ede:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ee2:	d402      	bmi.n	8002eea <_printf_i+0x18e>
 8002ee4:	065f      	lsls	r7, r3, #25
 8002ee6:	bf48      	it	mi
 8002ee8:	b2b6      	uxthmi	r6, r6
 8002eea:	07df      	lsls	r7, r3, #31
 8002eec:	bf48      	it	mi
 8002eee:	f043 0320 	orrmi.w	r3, r3, #32
 8002ef2:	6029      	str	r1, [r5, #0]
 8002ef4:	bf48      	it	mi
 8002ef6:	6023      	strmi	r3, [r4, #0]
 8002ef8:	b91e      	cbnz	r6, 8002f02 <_printf_i+0x1a6>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	f023 0320 	bic.w	r3, r3, #32
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	2310      	movs	r3, #16
 8002f04:	e7a6      	b.n	8002e54 <_printf_i+0xf8>
 8002f06:	4824      	ldr	r0, [pc, #144]	; (8002f98 <_printf_i+0x23c>)
 8002f08:	e7e4      	b.n	8002ed4 <_printf_i+0x178>
 8002f0a:	4615      	mov	r5, r2
 8002f0c:	e7bd      	b.n	8002e8a <_printf_i+0x12e>
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	6826      	ldr	r6, [r4, #0]
 8002f12:	1d18      	adds	r0, r3, #4
 8002f14:	6961      	ldr	r1, [r4, #20]
 8002f16:	6028      	str	r0, [r5, #0]
 8002f18:	0635      	lsls	r5, r6, #24
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	d501      	bpl.n	8002f22 <_printf_i+0x1c6>
 8002f1e:	6019      	str	r1, [r3, #0]
 8002f20:	e002      	b.n	8002f28 <_printf_i+0x1cc>
 8002f22:	0670      	lsls	r0, r6, #25
 8002f24:	d5fb      	bpl.n	8002f1e <_printf_i+0x1c2>
 8002f26:	8019      	strh	r1, [r3, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	4615      	mov	r5, r2
 8002f2c:	6123      	str	r3, [r4, #16]
 8002f2e:	e7bc      	b.n	8002eaa <_printf_i+0x14e>
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	1d1a      	adds	r2, r3, #4
 8002f36:	602a      	str	r2, [r5, #0]
 8002f38:	681d      	ldr	r5, [r3, #0]
 8002f3a:	6862      	ldr	r2, [r4, #4]
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 f859 	bl	8002ff4 <memchr>
 8002f42:	b108      	cbz	r0, 8002f48 <_printf_i+0x1ec>
 8002f44:	1b40      	subs	r0, r0, r5
 8002f46:	6060      	str	r0, [r4, #4]
 8002f48:	6863      	ldr	r3, [r4, #4]
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f52:	e7aa      	b.n	8002eaa <_printf_i+0x14e>
 8002f54:	462a      	mov	r2, r5
 8002f56:	4649      	mov	r1, r9
 8002f58:	4640      	mov	r0, r8
 8002f5a:	6923      	ldr	r3, [r4, #16]
 8002f5c:	47d0      	blx	sl
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d0ad      	beq.n	8002ebe <_printf_i+0x162>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	079b      	lsls	r3, r3, #30
 8002f66:	d413      	bmi.n	8002f90 <_printf_i+0x234>
 8002f68:	68e0      	ldr	r0, [r4, #12]
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	bfb8      	it	lt
 8002f70:	4618      	movlt	r0, r3
 8002f72:	e7a6      	b.n	8002ec2 <_printf_i+0x166>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4632      	mov	r2, r6
 8002f78:	4649      	mov	r1, r9
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	47d0      	blx	sl
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d09d      	beq.n	8002ebe <_printf_i+0x162>
 8002f82:	3501      	adds	r5, #1
 8002f84:	68e3      	ldr	r3, [r4, #12]
 8002f86:	9903      	ldr	r1, [sp, #12]
 8002f88:	1a5b      	subs	r3, r3, r1
 8002f8a:	42ab      	cmp	r3, r5
 8002f8c:	dcf2      	bgt.n	8002f74 <_printf_i+0x218>
 8002f8e:	e7eb      	b.n	8002f68 <_printf_i+0x20c>
 8002f90:	2500      	movs	r5, #0
 8002f92:	f104 0619 	add.w	r6, r4, #25
 8002f96:	e7f5      	b.n	8002f84 <_printf_i+0x228>
 8002f98:	08003220 	.word	0x08003220
 8002f9c:	08003231 	.word	0x08003231

08002fa0 <memmove>:
 8002fa0:	4288      	cmp	r0, r1
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	eb01 0402 	add.w	r4, r1, r2
 8002fa8:	d902      	bls.n	8002fb0 <memmove+0x10>
 8002faa:	4284      	cmp	r4, r0
 8002fac:	4623      	mov	r3, r4
 8002fae:	d807      	bhi.n	8002fc0 <memmove+0x20>
 8002fb0:	1e43      	subs	r3, r0, #1
 8002fb2:	42a1      	cmp	r1, r4
 8002fb4:	d008      	beq.n	8002fc8 <memmove+0x28>
 8002fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fbe:	e7f8      	b.n	8002fb2 <memmove+0x12>
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4402      	add	r2, r0
 8002fc4:	428a      	cmp	r2, r1
 8002fc6:	d100      	bne.n	8002fca <memmove+0x2a>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fd2:	e7f7      	b.n	8002fc4 <memmove+0x24>

08002fd4 <_sbrk_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4d05      	ldr	r5, [pc, #20]	; (8002ff0 <_sbrk_r+0x1c>)
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	602b      	str	r3, [r5, #0]
 8002fe0:	f7fd fef6 	bl	8000dd0 <_sbrk>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_sbrk_r+0x1a>
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_sbrk_r+0x1a>
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	2000025c 	.word	0x2000025c

08002ff4 <memchr>:
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	b2c9      	uxtb	r1, r1
 8002ffa:	4402      	add	r2, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	d101      	bne.n	8003006 <memchr+0x12>
 8003002:	2000      	movs	r0, #0
 8003004:	e003      	b.n	800300e <memchr+0x1a>
 8003006:	7804      	ldrb	r4, [r0, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	428c      	cmp	r4, r1
 800300c:	d1f6      	bne.n	8002ffc <memchr+0x8>
 800300e:	bd10      	pop	{r4, pc}

08003010 <memcpy>:
 8003010:	440a      	add	r2, r1
 8003012:	4291      	cmp	r1, r2
 8003014:	f100 33ff 	add.w	r3, r0, #4294967295
 8003018:	d100      	bne.n	800301c <memcpy+0xc>
 800301a:	4770      	bx	lr
 800301c:	b510      	push	{r4, lr}
 800301e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003022:	4291      	cmp	r1, r2
 8003024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003028:	d1f9      	bne.n	800301e <memcpy+0xe>
 800302a:	bd10      	pop	{r4, pc}

0800302c <_realloc_r>:
 800302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003030:	4680      	mov	r8, r0
 8003032:	4614      	mov	r4, r2
 8003034:	460e      	mov	r6, r1
 8003036:	b921      	cbnz	r1, 8003042 <_realloc_r+0x16>
 8003038:	4611      	mov	r1, r2
 800303a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800303e:	f7ff bc37 	b.w	80028b0 <_malloc_r>
 8003042:	b92a      	cbnz	r2, 8003050 <_realloc_r+0x24>
 8003044:	f7ff fbcc 	bl	80027e0 <_free_r>
 8003048:	4625      	mov	r5, r4
 800304a:	4628      	mov	r0, r5
 800304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003050:	f000 f81b 	bl	800308a <_malloc_usable_size_r>
 8003054:	4284      	cmp	r4, r0
 8003056:	4607      	mov	r7, r0
 8003058:	d802      	bhi.n	8003060 <_realloc_r+0x34>
 800305a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800305e:	d812      	bhi.n	8003086 <_realloc_r+0x5a>
 8003060:	4621      	mov	r1, r4
 8003062:	4640      	mov	r0, r8
 8003064:	f7ff fc24 	bl	80028b0 <_malloc_r>
 8003068:	4605      	mov	r5, r0
 800306a:	2800      	cmp	r0, #0
 800306c:	d0ed      	beq.n	800304a <_realloc_r+0x1e>
 800306e:	42bc      	cmp	r4, r7
 8003070:	4622      	mov	r2, r4
 8003072:	4631      	mov	r1, r6
 8003074:	bf28      	it	cs
 8003076:	463a      	movcs	r2, r7
 8003078:	f7ff ffca 	bl	8003010 <memcpy>
 800307c:	4631      	mov	r1, r6
 800307e:	4640      	mov	r0, r8
 8003080:	f7ff fbae 	bl	80027e0 <_free_r>
 8003084:	e7e1      	b.n	800304a <_realloc_r+0x1e>
 8003086:	4635      	mov	r5, r6
 8003088:	e7df      	b.n	800304a <_realloc_r+0x1e>

0800308a <_malloc_usable_size_r>:
 800308a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800308e:	1f18      	subs	r0, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bfbc      	itt	lt
 8003094:	580b      	ldrlt	r3, [r1, r0]
 8003096:	18c0      	addlt	r0, r0, r3
 8003098:	4770      	bx	lr
	...

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
